{
  "hash": "b5766d39e9aa4a78630f3edb7ab5dcf5",
  "result": {
    "markdown": "# Getting started\n\n## A first data analysis in R with a database\n\n![](images/lter_penguins.png){width=\"250\"}\n\n*Artwork by \\@allison_horst*\n\nBefore we start thinking about working with health care data spread across the OMOP common data model, let's first do a quick data analysis using a simpler dataset. For this we'll use data data from [palmerpenguins package](https://allisonhorst.github.io/palmerpenguins/), which contains data on penguins collected from the [Palmer Station](https://en.wikipedia.org/wiki/Palmer_Station) in Antarctica.\n\n## Getting set up\n\nAssuming that you have R and RStudio already set up, first we need to install a few packages not included in base R if we don´t already have them.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"dplyr\")\ninstall.packages(\"ggplot2\")\ninstall.packages(\"DBI\")\ninstall.packages(\"duckdb\")\ninstall.packages(\"palmerpenguins\")\n```\n:::\n\n\nOnce installed, we can load them like so.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(DBI)\nlibrary(duckdb)\nlibrary(palmerpenguins)\n```\n:::\n\n\n## Taking a peek at the data\n\nWe can get an overview of the data using the `glimpse()` command.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(penguins)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 344\nColumns: 8\n$ species           <fct> Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…\n$ island            <fct> Torgersen, Torgersen, Torgersen, Torgersen, Torgerse…\n$ bill_length_mm    <dbl> 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, …\n$ bill_depth_mm     <dbl> 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, …\n$ flipper_length_mm <int> 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186…\n$ body_mass_g       <int> 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, …\n$ sex               <fct> male, female, female, NA, female, male, female, male…\n$ year              <int> 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…\n```\n:::\n:::\n\n\nOr we could take a look at the first rows of the data using `head()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(penguins, 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 8\n  species island    bill_length_mm bill_depth_mm flipper_l…¹ body_…² sex    year\n  <fct>   <fct>              <dbl>         <dbl>       <int>   <int> <fct> <int>\n1 Adelie  Torgersen           39.1          18.7         181    3750 male   2007\n2 Adelie  Torgersen           39.5          17.4         186    3800 fema…  2007\n3 Adelie  Torgersen           40.3          18           195    3250 fema…  2007\n4 Adelie  Torgersen           NA            NA            NA      NA <NA>   2007\n5 Adelie  Torgersen           36.7          19.3         193    3450 fema…  2007\n# … with abbreviated variable names ¹​flipper_length_mm, ²​body_mass_g\n```\n:::\n:::\n\n\n## Inserting data into a database\n\nLet's put our penguins data into a duckdb database. We create the duckdb database, add the penguins data, and then create a reference to the table containing the data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndb<-dbConnect(duckdb::duckdb(), dbdir=\":memory:\")\ndbWriteTable(db, \"penguins\", penguins)\npenguins_db<-tbl(db, \"penguins\")\n```\n:::\n\n\nNow the data is in a database we could use SQL to get the first rows that we saw before\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndbGetQuery(db, \"SELECT * FROM penguins LIMIT 5\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  species    island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n1  Adelie Torgersen           39.1          18.7               181        3750\n2  Adelie Torgersen           39.5          17.4               186        3800\n3  Adelie Torgersen           40.3          18.0               195        3250\n4  Adelie Torgersen             NA            NA                NA          NA\n5  Adelie Torgersen           36.7          19.3               193        3450\n     sex year\n1   male 2007\n2 female 2007\n3 female 2007\n4   <NA> 2007\n5 female 2007\n```\n:::\n:::\n\n\nBut we could also use the same R code as before\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(penguins_db, 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# Source:   SQL [5 x 8]\n# Database: DuckDB 0.5.0 [eburn@Windows 10 x64:R 4.2.1/:memory:]\n  species island    bill_length_mm bill_depth_mm flipper_l…¹ body_…² sex    year\n  <fct>   <fct>              <dbl>         <dbl>       <int>   <int> <fct> <int>\n1 Adelie  Torgersen           39.1          18.7         181    3750 male   2007\n2 Adelie  Torgersen           39.5          17.4         186    3800 fema…  2007\n3 Adelie  Torgersen           40.3          18           195    3250 fema…  2007\n4 Adelie  Torgersen           NA            NA            NA      NA <NA>   2007\n5 Adelie  Torgersen           36.7          19.3         193    3450 fema…  2007\n# … with abbreviated variable names ¹​flipper_length_mm, ²​body_mass_g\n```\n:::\n:::\n\n\n## Translation from R to SQL\n\nThe magic here is provided by dbplyr which takes the R code and converts it into SQL, which is this case looks like\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(penguins_db, 1) %>% \n  show_query()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<SQL>\nSELECT *\nFROM penguins\nLIMIT 1\n```\n:::\n:::\n\n\nMore complicated SQL can also be written in what might be familiar dplyr code, for example\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins_db %>% \n  group_by(species) %>% \n  summarise(min_bill_length_mm=min(bill_length_mm),\n            median_bill_length_mm=median(bill_length_mm),\n            max_bill_length_mm=max(bill_length_mm)) %>% \n  mutate(min_max_bill_length_mm=paste0(min_bill_length_mm, \n                                       \" to \",\n                                       max_bill_length_mm)) %>% \n  select(\"species\", \n         \"median_bill_length_mm\",\n         \"min_max_bill_length_mm\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# Source:   SQL [3 x 3]\n# Database: DuckDB 0.5.0 [eburn@Windows 10 x64:R 4.2.1/:memory:]\n  species   median_bill_length_mm min_max_bill_length_mm\n  <fct>                     <dbl> <chr>                 \n1 Adelie                     38.8 32.1 to 46.0          \n2 Gentoo                     47.3 40.9 to 59.6          \n3 Chinstrap                  49.6 40.9 to 58.0          \n```\n:::\n:::\n\n\nwith the corresponding SQL looking like\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins_db %>% \n  group_by(species) %>% \n  summarise(min_bill_length_mm=min(bill_length_mm),\n            median_bill_length_mm=median(bill_length_mm),\n            max_bill_length_mm=max(bill_length_mm)) %>% \n  mutate(min_max_bill_length_mm=paste0(min, \" to \", max)) %>% \n  select(\"species\", \n         \"median_bill_length_mm\",\n         \"min_max_bill_length_mm\") %>% \n  show_query()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<SQL>\nSELECT\n  species,\n  median_bill_length_mm,\n  CONCAT_WS('', .Primitive(\"min\"), ' to ', .Primitive(\"max\")) AS min_max_bill_length_mm\nFROM (\n  SELECT\n    species,\n    MIN(bill_length_mm) AS min_bill_length_mm,\n    PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY bill_length_mm) AS median_bill_length_mm,\n    MAX(bill_length_mm) AS max_bill_length_mm\n  FROM penguins\n  GROUP BY species\n) q01\n```\n:::\n:::\n\n\n## Example analysis\n\nLet´s start by getting a count by species\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins_db %>% \n  group_by(species) %>% \n  count()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# Source:   SQL [3 x 2]\n# Database: DuckDB 0.5.0 [eburn@Windows 10 x64:R 4.2.1/:memory:]\n  species       n\n  <fct>     <dbl>\n1 Adelie      152\n2 Gentoo      124\n3 Chinstrap    68\n```\n:::\n:::\n\n\nNow suppose we are particularly interested in the body mass variable. We can first notice that there are a couple of missing records for this.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins_db %>% \n  mutate(missing_body_mass_g=if_else(\n    is.na(body_mass_g),1,0\n  )) %>% \n  group_by(species, missing_body_mass_g) %>% \n  tally()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# Source:   SQL [5 x 3]\n# Database: DuckDB 0.5.0 [eburn@Windows 10 x64:R 4.2.1/:memory:]\n# Groups:   species\n  species   missing_body_mass_g     n\n  <fct>                   <dbl> <dbl>\n1 Adelie                      0   151\n2 Adelie                      1     1\n3 Gentoo                      0   123\n4 Gentoo                      1     1\n5 Chinstrap                   0    68\n```\n:::\n:::\n\n\nWe can get the mean for each of the species (dropping those two missing records).\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins_db %>% \n  group_by(species) %>% \n  summarise(mean_body_mass_g=round(mean(body_mass_g, na.rm=TRUE),0))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# Source:   SQL [3 x 2]\n# Database: DuckDB 0.5.0 [eburn@Windows 10 x64:R 4.2.1/:memory:]\n  species   mean_body_mass_g\n  <fct>                <dbl>\n1 Adelie                3701\n2 Gentoo                5076\n3 Chinstrap             3733\n```\n:::\n:::\n\n\nWe can then also do a histogram for each of the species.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins_db %>% \n  collect() %>% \n  ggplot(aes(group=species, fill=species))+\n  facet_grid(species~ .) +\n  geom_histogram(aes(body_mass_g), colour=\"black\", binwidth = 100)+\n  theme_bw()+\n  theme(legend.position = \"none\") \n```\n\n::: {.cell-output-display}\n![](ch_1_getting_started_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n::: {.callout-tip collapse=\"true\"}\n## Choosing the right time to collect \n\n`collect()` brings data out of the database and into R. Above we use it to bring the entire penguins data back into R so that we can then use `ggplot()` to make our histogram. \n\nIn practice, however, we wouldn't be reading out entire database tables as typically we are working with a database because we have data of a size that wouldn't fit in the memory of our computer. Generally we would collect only once we prepared our data for extraction (i.e. limiting to rows and columns of interest). \n:::\n\nHow about the relationship between body mass and bill depth?\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins %>% \n  collect() %>% \n  ggplot(aes(x=bill_depth_mm,y=body_mass_g))+\n  geom_point()+\n  geom_smooth(method=\"lm\",se=FALSE )+\n  theme_bw()+\n  theme(legend.position = \"none\") \n```\n\n::: {.cell-output-display}\n![](ch_1_getting_started_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\nA negative correlation between body mass and bill depth, that seems a little unexpected. What about if we stratify by species?\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins %>% \n  collect() %>% \n  ggplot(aes(x=bill_depth_mm,y=body_mass_g))+\n  facet_grid(species~ .) +\n  geom_point()+\n  geom_smooth(method=\"lm\",se=FALSE )+\n  theme_bw()+\n  theme(legend.position = \"none\") \n```\n\n::: {.cell-output-display}\n![](ch_1_getting_started_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\nAs well as having an example of working with data in database from R, you also have an example of [Simpson´s paradox](https://en.wikipedia.org/wiki/Simpson%27s_paradox)! And now we've reached the end of this example, we can close the database like so\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndbDisconnect(db)\n```\n:::\n\n\n## Further reading\n\n-   [R for Data Science (Chapter 13: Relational data)](https://r4ds.had.co.nz/relational-data.html)\n\n-   [Writing SQL with dbplyr](https://dbplyr.tidyverse.org/articles/sql.html)\n\n-   [Data Carpentry: SQL databases and R](https://datacarpentry.org/R-ecology-lesson/05-r-and-databases.html)\n",
    "supporting": [
      "ch_1_getting_started_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}