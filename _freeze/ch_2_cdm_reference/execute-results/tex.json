{
  "hash": "45f9b59e542f34d6862de1b8b6e63527",
  "result": {
    "markdown": "# Creating a reference to a database using the OMOP common data model\n\n## Connecting to a database from R using DBI\n\nDatabase connections from R can be made using the [DBI package](https://dbi.r-dbi.org/). The back-end for `DBI` is facilitated by database specific driver packages. As an example, lets say we want to work with a local duckdb from R. In this case the we can use the duckdb R package as the driver.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(DBI)\ndb<-dbConnect(duckdb::duckdb(), dbdir=\":memory:\")\n```\n:::\n\n\n\nIf we instead wanted to connect to other database management systems, these connections would be supported by the associated back-end packages and could look something like the below example for Postgres:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Postgres\ndb <- DBI::dbConnect(RPostgres::Postgres(),\n                      dbname = Sys.getenv(\"CDM5_POSTGRESQL_DBNAME\"),\n                      host = Sys.getenv(\"CDM5_POSTGRESQL_HOST\"),\n                      user = Sys.getenv(\"CDM5_POSTGRESQL_USER\"),\n                      password = Sys.getenv(\"CDM5_POSTGRESQL_PASSWORD\"))\n```\n:::\n\n\n\n## Creating a reference to the OMOP common data model\n\nAs seen in the previous chapter, once a connection to the database has been created then we could create references to the various tables in the database and build queries using in a familiar dplyr style. However, as we already know what the structure of the OMOP CDM looks like, we can avoid the overhead of building *ad hoc* references by instead using the `CDMConnector` package to quickly create a reference to the OMOP CDM data as a whole.\n\nIf you don't already have it installed, the first step would be to install `CDMConnector` from CRAN.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"CDMConnector\")\n```\n:::\n\n\n\nOnce we have it installed, we can then load it as with other R packages.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(CDMConnector)\n```\n:::\n\n\n\nFor this example, we'll use the Eunomia example data contained in a duckdb database. First we need to download the data. And once downloaded, make sure to add the path to your Renviron.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# change pathToData to the location you want to save the data\nCDMConnector::downloadEunomiaData(\n  pathToData = here::here(), \n  overwrite = TRUE\n)\n# once downloaded, save your pathToData to your Renviron (and then restart R)\n# EUNOMIA_DATA_FOLDER=\"......\"\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndb <- DBI::dbConnect(duckdb::duckdb(), \n                     dbdir = CDMConnector::eunomia_dir())\ncdm <- CDMConnector::cdm_from_con(con = db, \n                                  cdm_schema = \"main\")\ncdm\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# OMOP CDM reference (tbl_duckdb_connection)\n\nTables: person, observation_period, visit_occurrence, visit_detail, condition_occurrence, drug_exposure, procedure_occurrence, measurement, observation, death, location, care_site, provider, drug_era, dose_era, condition_era, cdm_source, concept, vocabulary, concept_relationship, concept_synonym, concept_ancestor, drug_strength\n```\n:::\n:::\n\n\n\nOnce we have created the our reference to the overall OMOP CDM, we can reference specific tables using the \"\\$\" operator or \\[\\[\"\"\\]\\].\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncdm$observation_period\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# Source:   table<main.observation_period> [?? x 5]\n# Database: DuckDB 0.5.0 [eburn@Windows 10 x64:R 4.2.1/C:\\Users\\eburn\\AppData\\Local\\Temp\\RtmpaUwIHB/orsvbhee]\n   observation_period_id person_id observation_period_start~1 observat~2 perio~3\n                   <dbl>     <dbl> <date>                     <date>       <dbl>\n 1                     6         6 1963-12-31                 2007-02-06  4.48e7\n 2                    13        13 2009-04-26                 2019-04-14  4.48e7\n 3                    27        27 2002-01-30                 2018-11-21  4.48e7\n 4                    16        16 1971-10-14                 2017-11-02  4.48e7\n 5                    55        55 2009-05-30                 2019-03-23  4.48e7\n 6                    60        60 1990-11-21                 2019-01-23  4.48e7\n 7                    42        42 1909-11-03                 2019-03-13  4.48e7\n 8                    33        33 1986-05-12                 2018-09-10  4.48e7\n 9                    18        18 1965-11-17                 2018-11-07  4.48e7\n10                    25        25 2007-03-18                 2019-04-07  4.48e7\n# ... with more rows, and abbreviated variable names\n#   1: observation_period_start_date, 2: observation_period_end_date,\n#   3: period_type_concept_id\n```\n:::\n\n```{.r .cell-code}\ncdm[[\"observation_period\"]]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# Source:   table<main.observation_period> [?? x 5]\n# Database: DuckDB 0.5.0 [eburn@Windows 10 x64:R 4.2.1/C:\\Users\\eburn\\AppData\\Local\\Temp\\RtmpaUwIHB/orsvbhee]\n   observation_period_id person_id observation_period_start~1 observat~2 perio~3\n                   <dbl>     <dbl> <date>                     <date>       <dbl>\n 1                     6         6 1963-12-31                 2007-02-06  4.48e7\n 2                    13        13 2009-04-26                 2019-04-14  4.48e7\n 3                    27        27 2002-01-30                 2018-11-21  4.48e7\n 4                    16        16 1971-10-14                 2017-11-02  4.48e7\n 5                    55        55 2009-05-30                 2019-03-23  4.48e7\n 6                    60        60 1990-11-21                 2019-01-23  4.48e7\n 7                    42        42 1909-11-03                 2019-03-13  4.48e7\n 8                    33        33 1986-05-12                 2018-09-10  4.48e7\n 9                    18        18 1965-11-17                 2018-11-07  4.48e7\n10                    25        25 2007-03-18                 2019-04-07  4.48e7\n# ... with more rows, and abbreviated variable names\n#   1: observation_period_start_date, 2: observation_period_end_date,\n#   3: period_type_concept_id\n```\n:::\n:::\n\n\n\nWhen we created our reference we could have also specified a subset of cdm tables that we want to read:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncdm <- CDMConnector::cdm_from_con(db, \n                                  cdm_tables = c(\"person\",\"observation_period\"))\ncdm\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# OMOP CDM reference (tbl_duckdb_connection)\n\nTables: person, observation_period\n```\n:::\n:::\n\n\n\nMoreover, we can also specify a write schema and the tables that we are interested in it when creating our reference. For example, if we wanted to create a reference to the person and observation period tables in the common data model along with cohort tables in a schema we have write access to, we could do this like so:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncdm <- CDMConnector::cdm_from_con(db,\n  cdm_schema = \"main\",\n  cdm_tables = c(\"person\",\"observation_period\"),\n  write_schema = \"results\",\n  cohort_tables = c(\"exposure_cohort\", \"outcome_cohort\"))\n```\n:::\n\n\n\n## Database snapshot\n\nWe can also use `CDMConnector` to provide a summary of the metadata for the OMOP CDM data we have connected to\n\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncdm_from_con(con = db, \n             cdm_schema = \"main\") %>% \n  snapshot() %>% \n  glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nList of 7\n $ cdm_source_name       : chr \"Synthea synthetic health database\"\n $ cdm_version           : chr \"v5.3.1\"\n $ cdm_holder            : chr \"OHDSI Community\"\n $ cdm_release_date      : Date[1:1], format: \"2019-05-25\"\n $ vocabulary_version    : chr \"v5.0 18-JAN-19\"\n $ person_cnt            : num 2694\n $ observation_period_cnt: num 5343\n - attr(*, \"class\")= chr \"cdm_snapshot\"\n```\n:::\n:::\n\n\n\n## Further reading\n\n-   [CDMConnector package](https://darwin-eu.github.io/CDMConnector)\n",
    "supporting": [
      "ch_2_cdm_reference_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}