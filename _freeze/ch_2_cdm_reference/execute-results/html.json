{
  "hash": "2f581741a82d00224b76a7ebaef2b956",
  "result": {
    "engine": "knitr",
    "markdown": "# Creating a reference to the OMOP common data model\n\n## Connecting to a database from R using DBI\n\nDatabase connections from R can be made using the [DBI package](https://dbi.r-dbi.org/). The back-end for `DBI` is facilitated by database specific driver packages. We saw in Chapter 1 an example where we created a new, empty, in-process [duckdb](https://duckdb.org/) database which we then added database. But we could have instead connected to an existing duckdb database. This could, for example, look like\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(DBI)\nlibrary(here)\nlibrary(dplyr)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndb <- dbConnect(duckdb::duckdb(), \n              dbdir = here(\"my_duckdb_database.ducdkb\"))\n```\n:::\n\n\nFor other database management systems, creating connections would be supported by the associated back-end packages. For example a connection to a Postgres database would look something like:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndb <- DBI::dbConnect(RPostgres::Postgres(),\n                      dbname = Sys.getenv(\"CDM5_POSTGRESQL_DBNAME\"),\n                      host = Sys.getenv(\"CDM5_POSTGRESQL_HOST\"),\n                      user = Sys.getenv(\"CDM5_POSTGRESQL_USER\"),\n                      password = Sys.getenv(\"CDM5_POSTGRESQL_PASSWORD\"))\n```\n:::\n\n\n## Creating a reference to the OMOP common data model\n\nAs seen in the previous chapter, once a connection to the database has been created we can then create references to the various tables in the database and build queries using in a familiar dplyr style. To show this, let's download an example dataset (*synthea-covid19-10k*) provided by `CDMConnector`. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nCDMConnector::downloadEunomiaData(\n  datasetName = \"synthea-covid19-10k\",\n  cdmVersion = \"5.3\",\n  pathToData = here(),\n  overwrite = FALSE\n)\n```\n:::\n\n\nNow we have this downloaded, we can create a connection to a duckdb database containing the data in a similar way to how we've done before.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndb <- dbConnect(duckdb::duckdb(), \n              dbdir = CDMConnector::eunomiaDir(datasetName = \"synthea-covid19-10k\"))\n\ndb |> tbl(\"person\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# Source:   table<person> [?? x 18]\n# Database: DuckDB v1.0.0 [eburn@Windows 10 x64:R 4.4.0/C:\\Users\\eburn\\AppData\\Local\\Temp\\RtmpeWBrt1\\fileb5821a71be8.duckdb]\n   person_id gender_concept_id year_of_birth month_of_birth day_of_birth\n       <int>             <int>         <int>          <int>        <int>\n 1         1              8532          1970              4           24\n 2         2              8532          1929              3           18\n 3         3              8532          1970              4            4\n 4         4              8507          1966              2           26\n 5         5              8532          1936              6           10\n 6         6              8507          1996              5           29\n 7         7              8507          1923             11           14\n 8         8              8507          2018              8           20\n 9         9              8532          1933              2           11\n10        10              8507          2010              3            7\n# ℹ more rows\n# ℹ 13 more variables: birth_datetime <dttm>, race_concept_id <int>,\n#   ethnicity_concept_id <int>, location_id <int>, provider_id <int>,\n#   care_site_id <int>, person_source_value <chr>, gender_source_value <chr>,\n#   gender_source_concept_id <int>, race_source_value <chr>,\n#   race_source_concept_id <int>, ethnicity_source_value <chr>,\n#   ethnicity_source_concept_id <int>\n```\n\n\n:::\n\n```{.r .cell-code}\ndb |> tbl(\"observation_period\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# Source:   table<observation_period> [?? x 5]\n# Database: DuckDB v1.0.0 [eburn@Windows 10 x64:R 4.4.0/C:\\Users\\eburn\\AppData\\Local\\Temp\\RtmpeWBrt1\\fileb5821a71be8.duckdb]\n   observation_period_id person_id observation_period_s…¹ observation_period_e…²\n                   <int>     <int> <date>                 <date>                \n 1                     1         1 2014-05-09             2023-05-12            \n 2                     2         2 1977-04-11             1986-09-15            \n 3                     3         3 2014-04-19             2023-04-22            \n 4                     4         4 2014-03-22             2023-04-08            \n 5                     5         5 2013-11-13             2023-01-04            \n 6                     6         6 2013-07-17             2021-08-04            \n 7                     7         7 2013-06-26             2022-08-17            \n 8                     8         8 2018-08-20             2022-07-25            \n 9                     9         9 2013-08-03             2022-09-24            \n10                    10        10 2013-08-11             2023-04-02            \n# ℹ more rows\n# ℹ abbreviated names: ¹​observation_period_start_date,\n#   ²​observation_period_end_date\n# ℹ 1 more variable: period_type_concept_id <int>\n```\n\n\n:::\n:::\n\n\nAs the structure of the OMOP CDM is already known, we can avoid the overhead of creating individual references to the OMOP CDM tables by using the `CDMConnector` package. `CDMConnector` will do the work for us and quickly create a joint reference for all OMOP CDM database tables in one go.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(CDMConnector)\ncdm <- cdm_from_con(con = db, \n                    cdm_schema = \"main\", \n                    write_schema = \"main\", \n                    cdm_name = \"Synthea Covid-19 data\")\ncdm\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── # OMOP CDM reference (duckdb) of Synthea Covid-19 data ──────────────────────\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n• omop tables: person, observation_period, visit_occurrence, visit_detail,\ncondition_occurrence, drug_exposure, procedure_occurrence, device_exposure,\nmeasurement, observation, death, note, note_nlp, specimen, fact_relationship,\nlocation, care_site, provider, payer_plan_period, cost, drug_era, dose_era,\ncondition_era, metadata, cdm_source, concept, vocabulary, domain,\nconcept_class, concept_relationship, relationship, concept_synonym,\nconcept_ancestor, source_to_concept_map, drug_strength, cohort_definition,\nattribute_definition\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n• cohort tables: -\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n• achilles tables: -\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n• other tables: -\n```\n\n\n:::\n:::\n\n\nOnce we have created the our reference to the overall OMOP CDM, we can reference specific tables using the \"\\$\" operator.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncdm$person\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# Source:   table<main.person> [?? x 18]\n# Database: DuckDB v1.0.0 [eburn@Windows 10 x64:R 4.4.0/C:\\Users\\eburn\\AppData\\Local\\Temp\\RtmpeWBrt1\\fileb5821a71be8.duckdb]\n   person_id gender_concept_id year_of_birth month_of_birth day_of_birth\n       <int>             <int>         <int>          <int>        <int>\n 1         1              8532          1970              4           24\n 2         2              8532          1929              3           18\n 3         3              8532          1970              4            4\n 4         4              8507          1966              2           26\n 5         5              8532          1936              6           10\n 6         6              8507          1996              5           29\n 7         7              8507          1923             11           14\n 8         8              8507          2018              8           20\n 9         9              8532          1933              2           11\n10        10              8507          2010              3            7\n# ℹ more rows\n# ℹ 13 more variables: birth_datetime <dttm>, race_concept_id <int>,\n#   ethnicity_concept_id <int>, location_id <int>, provider_id <int>,\n#   care_site_id <int>, person_source_value <chr>, gender_source_value <chr>,\n#   gender_source_concept_id <int>, race_source_value <chr>,\n#   race_source_concept_id <int>, ethnicity_source_value <chr>,\n#   ethnicity_source_concept_id <int>\n```\n\n\n:::\n:::\n\n\nAlternatively, you could also access a specific table reference like so\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncdm[[\"observation_period\"]]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# Source:   table<main.observation_period> [?? x 5]\n# Database: DuckDB v1.0.0 [eburn@Windows 10 x64:R 4.4.0/C:\\Users\\eburn\\AppData\\Local\\Temp\\RtmpeWBrt1\\fileb5821a71be8.duckdb]\n   observation_period_id person_id observation_period_s…¹ observation_period_e…²\n                   <int>     <int> <date>                 <date>                \n 1                     1         1 2014-05-09             2023-05-12            \n 2                     2         2 1977-04-11             1986-09-15            \n 3                     3         3 2014-04-19             2023-04-22            \n 4                     4         4 2014-03-22             2023-04-08            \n 5                     5         5 2013-11-13             2023-01-04            \n 6                     6         6 2013-07-17             2021-08-04            \n 7                     7         7 2013-06-26             2022-08-17            \n 8                     8         8 2018-08-20             2022-07-25            \n 9                     9         9 2013-08-03             2022-09-24            \n10                    10        10 2013-08-11             2023-04-02            \n# ℹ more rows\n# ℹ abbreviated names: ¹​observation_period_start_date,\n#   ²​observation_period_end_date\n# ℹ 1 more variable: period_type_concept_id <int>\n```\n\n\n:::\n:::\n\n\nWhen creating our cdm reference we can also specify a write schema. This would be a schema in which we have permission to create tables (as we're unlikely to have that permission for the schema containing the tables with the patient-level data).\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncdm <- cdm_from_con(db,\n  cdm_schema = \"main\",\n  write_schema = \"results\")\n```\n:::\n\n\n::: {.callout-tip collapse=\"true\"}\n## Setting a write prefix\n\nWe can set a prefix that will be used whenever permanent tables are created the write schema. This can be useful when we're sharing our write schema with others and want to avoid table name conflicts and easily drop tables created as part of a particular study.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncdm <- cdm_from_con(db,\n  cdm_schema = \"main\",\n  write_schema = c(schema=\"main\", prefix = \"my_study_\"))\n```\n:::\n\n:::\n\n## CDM name\n\nOur cdm reference will be associated with a name. By default this name will be taken from the cdm source name field from the cdm source table. We can though set this to a different name when creating our cdm reference. This cdm name attribute of our reference is particularly useful in the context of network studies to keep track of which results are associated with which database.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncdm <- cdm_from_con(db,\n  cdm_schema = \"main\", \n  write_schema = \"main\")\ncdm$cdm_source\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# Source:   table<main.cdm_source> [1 x 10]\n# Database: DuckDB v1.0.0 [eburn@Windows 10 x64:R 4.4.0/C:\\Users\\eburn\\AppData\\Local\\Temp\\RtmpeWBrt1\\fileb5821a71be8.duckdb]\n  cdm_source_name cdm_source_abbreviation cdm_holder source_description    \n  <chr>           <chr>                   <chr>      <chr>                 \n1 Synthea         Synthea                 \"\"         Synthea Synthetic Data\n# ℹ 6 more variables: source_documentation_reference <chr>,\n#   cdm_etl_reference <chr>, source_release_date <date>,\n#   cdm_release_date <date>, cdm_version <chr>, vocabulary_version <chr>\n```\n\n\n:::\n\n```{.r .cell-code}\ncdm_name(cdm)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Synthea\"\n```\n\n\n:::\n\n```{.r .cell-code}\ncdm <- cdm_from_con(db,\n  cdm_schema = \"main\", \n  write_schema = \"main\", \n  cdm_name = \"my_cdm\")\ncdm_name(cdm)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"my_cdm\"\n```\n\n\n:::\n:::\n\n\n# Taking a snapshot of your OMOP CDM\n\nAfter creating our cdm reference we can get a summary of the metadata for the OMOP CDM data using the `snapshot()` function from `CDMConnector`.\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncdm_snapshot <- cdm_from_con(con = db, \n                             cdm_name = \"my_cdm\",\n                             cdm_schema = \"main\", \n                             write_schema = \"main\") %>% \n  snapshot()\ncdm_snapshot %>% \n  glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 1\nColumns: 13\n$ cdm_name                               <chr> \"my_cdm\"\n$ cdm_source_name                        <chr> \"Synthea\"\n$ cdm_description                        <chr> \"Synthea Synthetic Data\"\n$ cdm_documentation_reference            <chr> \"https://synthetichealth.github…\n$ cdm_version                            <chr> \"5.3.1\"\n$ cdm_holder                             <chr> \"\"\n$ cdm_release_date                       <chr> \"2023-06-14\"\n$ vocabulary_version                     <chr> \"v5.0 22-JUN-22\"\n$ person_count                           <chr> \"10754\"\n$ observation_period_count               <chr> \"10754\"\n$ earliest_observation_period_start_date <chr> \"1923-12-29\"\n$ latest_observation_period_end_date     <chr> \"2023-06-14\"\n$ snapshot_date                          <chr> \"2024-06-14\"\n```\n\n\n:::\n:::\n\n\n# Disconnecting\n\nOnce we have finished our analysis we can close our connection to the database behind our cdm reference like so.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncdmDisconnect(cdm) \n```\n:::\n\n\n# Further reading\n\n-   [CDMConnector package](https://darwin-eu.github.io/CDMConnector)\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}