{
  "hash": "3505b0a9f3c6628b278fcab27593479a",
  "result": {
    "markdown": "# Working with databases from R\n\nLet's start by taking some data and putting it in a database. Here we'll use an in-memory duckdb database, but the same code should work for other databases with only the connection details and the package used to connect to the database changing.\n\nFor this example let's use data on Darwin's finches as that seems rather appropriate (link to wiki article on darwin finches)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# install packages\n# commented out as you might already have them\n# but if not then uncomment and run\n# install.packages(\"DBI\")\n# install.packages(\"SQLite\")\n# install.packages(\"dbplyr\")\n# install.packages(\"dplyr\")\n# \n# # load packages\n# library(DBI)\n# library(SQLite)\n# library(dbplyr)\n# library(dplyr)\n\n# get data \n\n# move into a database\n```\n:::\n\n\n## show_query()\n\n## filter(), select(), mutate()\n\n## right_join(), left_join(), inner_join(), and anti_join()\n\n## summarise()\n\n## collect() and compute()\n\n## working with dates\n\nHere be dragons\n\n## working with strings\n\n## bespoke sql\n\nAlternative approaches\n\n1\\) Where to do computation\n\n\\- Database side vs in local memory vs R\n\n2\\) Scope of a package\n\n3\\) Scope of analysis code All in one vs one at a time\n",
    "supporting": [
      "databases_and_r_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}