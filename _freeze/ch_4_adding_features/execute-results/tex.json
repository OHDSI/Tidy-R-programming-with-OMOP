{
  "hash": "31aaaa61bba13f993613ead4e5a9af4b",
  "result": {
    "markdown": "# Indentifying patient characteristics\n\nFor this chapter, we'll again use our example COVID-19 dataset.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(DBI)\nlibrary(dbplyr)\nlibrary(dplyr)\nlibrary(here)\nlibrary(CDMConnector)\nlibrary(PatientProfiles)\nlibrary(ggplot2)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndb<-dbConnect(duckdb::duckdb(),\n              dbdir = eunomiaDir(datasetName = \"synthea-covid19-10k\"))\ncdm <- cdm_from_con(db,\n                    cdm_schema = \"main\")\n```\n:::\n\n\nAs part of an analysis we almost always have a need to identify certain characteristics related to the individuals in our data. These characteristics might be time-invariant (ie a characteristic that does not change as time passes and a person ages) or time-varying. In various datasets, however, characteristics that could conceptually be considered as time-varying are encoded as time-invariant. One example for the latter is that in some cases an individual may be associated with a particular socioeconomic status or nationality that for the purposes of the data is treated as time-invariant.\n\n## Adding specific demographics\n\nThe `PatientProfiles` package makes it easy for us to add demographic information to tables in the OMOP CDM. Say we are interested in individuals age and sex at time of diagnosis with COVID-19, we can add these variables to the table like so. Note that because age is time-varying, we have to specify the variable with the date for which we want to calculate age relative to.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncdm$condition_occurrence <- cdm$condition_occurrence %>% \n  addSex() %>% \n  addAge(indexDate = \"condition_start_date\")\n\ncdm$condition_occurrence %>% \n  glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: ??\nColumns: 18\nDatabase: DuckDB 0.8.1 [eburn@Windows 10 x64:R 4.2.1/C:\\Users\\eburn\\AppData\\Local\\Temp\\RtmponzVhx\\file1306824223f.duckdb]\n$ condition_occurrence_id       <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1~\n$ person_id                     <int> 2, 6, 7, 8, 8, 8, 8, 16, 16, 18, 18, 25,~\n$ condition_concept_id          <int> 381316, 321042, 381316, 37311061, 437663~\n$ condition_start_date          <date> 1986-09-08, 2021-06-23, 2021-04-07, 202~\n$ condition_start_datetime      <dttm> 1986-09-08, 2021-06-23, 2021-04-07, 202~\n$ condition_end_date            <date> 1986-09-08, 2021-06-23, 2021-04-07, 202~\n$ condition_end_datetime        <dttm> 1986-09-08, 2021-06-23, 2021-04-07, 202~\n$ condition_type_concept_id     <int> 38000175, 38000175, 38000175, 38000175, ~\n$ condition_status_concept_id   <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0~\n$ stop_reason                   <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, ~\n$ provider_id                   <int> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, ~\n$ visit_occurrence_id           <int> 19, 55, 67, 79, 79, 79, 79, 168, 171, 19~\n$ visit_detail_id               <int> 1000019, 1000055, 1000067, 1000079, 1000~\n$ condition_source_value        <chr> \"230690007\", \"410429000\", \"230690007\", \"~\n$ condition_source_concept_id   <int> 381316, 321042, 381316, 37311061, 437663~\n$ condition_status_source_value <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, ~\n$ sex                           <chr> \"Female\", \"Male\", \"Male\", \"Male\", \"Male\"~\n$ age                           <dbl> 57, 25, 97, 2, 2, 2, 2, 75, 77, 57, 76, ~\n```\n:::\n:::\n\n\nWe now have two variables added containing values for age and sex.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncdm$condition_occurrence %>% \n  glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: ??\nColumns: 18\nDatabase: DuckDB 0.8.1 [eburn@Windows 10 x64:R 4.2.1/C:\\Users\\eburn\\AppData\\Local\\Temp\\RtmponzVhx\\file1306824223f.duckdb]\n$ condition_occurrence_id       <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1~\n$ person_id                     <int> 2, 6, 7, 8, 8, 8, 8, 16, 16, 18, 18, 25,~\n$ condition_concept_id          <int> 381316, 321042, 381316, 37311061, 437663~\n$ condition_start_date          <date> 1986-09-08, 2021-06-23, 2021-04-07, 202~\n$ condition_start_datetime      <dttm> 1986-09-08, 2021-06-23, 2021-04-07, 202~\n$ condition_end_date            <date> 1986-09-08, 2021-06-23, 2021-04-07, 202~\n$ condition_end_datetime        <dttm> 1986-09-08, 2021-06-23, 2021-04-07, 202~\n$ condition_type_concept_id     <int> 38000175, 38000175, 38000175, 38000175, ~\n$ condition_status_concept_id   <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0~\n$ stop_reason                   <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, ~\n$ provider_id                   <int> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, ~\n$ visit_occurrence_id           <int> 19, 55, 67, 79, 79, 79, 79, 168, 171, 19~\n$ visit_detail_id               <int> 1000019, 1000055, 1000067, 1000079, 1000~\n$ condition_source_value        <chr> \"230690007\", \"410429000\", \"230690007\", \"~\n$ condition_source_concept_id   <int> 381316, 321042, 381316, 37311061, 437663~\n$ condition_status_source_value <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, ~\n$ sex                           <chr> \"Female\", \"Male\", \"Male\", \"Male\", \"Male\"~\n$ age                           <dbl> 57, 25, 97, 2, 2, 2, 2, 75, 77, 57, 76, ~\n```\n:::\n:::\n\n\nAnd with these now added it is straightforward to calculate mean age at condition start date by sex.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncdm$condition_occurrence %>%\n  summarise(mean_age = mean(age, na.rm=TRUE), .by = \"sex\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# Source:   SQL [2 x 2]\n# Database: DuckDB 0.8.1 [eburn@Windows 10 x64:R 4.2.1/C:\\Users\\eburn\\AppData\\Local\\Temp\\RtmponzVhx\\file1306824223f.duckdb]\n  sex    mean_age\n  <chr>     <dbl>\n1 Female     50.8\n2 Male       56.5\n```\n:::\n:::\n\n\n## Adding multiple demographics simultaneously\n\nWe've now seen individual functions from `PatientProfiles` to add age and sex, and the package has others to add other characteristics like days of prior history in the database (`PatientProfiles::addPriorObservation()`). In additional to these individuals functions, the package also provides a more general function to get all of these characteristics at the same time (that is more time efficient that getting them one by one).\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncdm$drug_exposure <- cdm$drug_exposure %>% \n  addDemographics(indexDate = \"drug_exposure_start_date\")\n\ncdm$drug_exposure %>% \n  glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: ??\nColumns: 27\nDatabase: DuckDB 0.8.1 [eburn@Windows 10 x64:R 4.2.1/C:\\Users\\eburn\\AppData\\Local\\Temp\\RtmponzVhx\\file1306824223f.duckdb]\n$ drug_exposure_id             <int> 245761, 245762, 245763, 245764, 245765, 2~\n$ person_id                    <int> 7764, 7764, 7764, 7764, 7764, 7764, 7764,~\n$ drug_concept_id              <int> 40213227, 40213201, 40213198, 40213154, 4~\n$ drug_exposure_start_date     <date> 2015-02-08, 2010-01-10, 2010-01-10, 2017~\n$ drug_exposure_start_datetime <dttm> 2015-02-08 22:40:04, 2010-01-10 22:40:04~\n$ drug_exposure_end_date       <date> 2015-02-08, 2010-01-10, 2010-01-10, 2017~\n$ drug_exposure_end_datetime   <dttm> 2015-02-08 22:40:04, 2010-01-10 22:40:04~\n$ verbatim_end_date            <date> 2015-02-08, 2010-01-10, 2010-01-10, 2017~\n$ drug_type_concept_id         <int> 32869, 32869, 32869, 32869, 32869, 32869,~\n$ stop_reason                  <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N~\n$ refills                      <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,~\n$ quantity                     <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,~\n$ days_supply                  <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,~\n$ sig                          <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N~\n$ route_concept_id             <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,~\n$ lot_number                   <chr> \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"~\n$ provider_id                  <int> 14656, 14656, 14656, 14656, 14656, 14656,~\n$ visit_occurrence_id          <int> 80896, 80891, 80891, 80892, 80895, 80896,~\n$ visit_detail_id              <int> 1080896, 1080891, 1080891, 1080892, 10808~\n$ drug_source_value            <chr> \"113\", \"33\", \"133\", \"140\", \"140\", \"140\", ~\n$ drug_source_concept_id       <int> 40213227, 40213201, 40213198, 40213154, 4~\n$ route_source_value           <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N~\n$ dose_unit_source_value       <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N~\n$ age                          <dbl> 71, 66, 66, 73, 72, 71, 69, 67, 70, 68, 6~\n$ sex                          <chr> \"Male\", \"Male\", \"Male\", \"Male\", \"Male\", \"~\n$ prior_observation            <dbl> 2597, 742, 742, 3339, 2968, 2597, 1855, 1~\n$ future_observation           <dbl> 896, 2751, 2751, 154, 525, 896, 1638, 238~\n```\n:::\n:::\n\n\nWith these characteristics now all added, we can now calculate mean age, prior observation (how many days have passed since the individual's most recent observation start date), and future observation (how many days until the individual's nearest observation end date) at drug exposure start date by sex.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncdm$drug_exposure %>%\n  summarise(mean_age = mean(age, na.rm=TRUE),\n            mean_prior_observation = mean(prior_observation, na.rm=TRUE),\n            mean_future_observation = mean(future_observation, na.rm=TRUE),\n            .by = \"sex\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# Source:   SQL [2 x 4]\n# Database: DuckDB 0.8.1 [eburn@Windows 10 x64:R 4.2.1/C:\\Users\\eburn\\AppData\\Local\\Temp\\RtmponzVhx\\file1306824223f.duckdb]\n  sex    mean_age mean_prior_observation mean_future_observation\n  <chr>     <dbl>                  <dbl>                   <dbl>\n1 Male       43.0                  2455.                   1768.\n2 Female     39.4                  2096.                   1661.\n```\n:::\n:::\n\n\n## Creating categories\n\nWhen we add age, either via addAge or addDemographics, we can also add another variable containing age groups. These age groups are specified in a list of vectors, each of which contain the lower and upper bounds.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncdm$visit_occurrence <- cdm$visit_occurrence %>%\n  addAge(indexDate = \"visit_start_date\",\n    ageGroup = list(c(0,17), c(18, 64),\n                    c(65, 150)))\n\ncdm$visit_occurrence %>% \n  filter(age >= 0 & age <= 150) %>% \n  group_by(age_group) %>% \n  tally() %>% \n  collect() %>% \n  ggplot() + \n  geom_col(aes(x = age_group, y = n)) + \n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](ch_4_adding_features_files/figure-pdf/unnamed-chunk-8-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n`PatientProfiles` also provides a more general function for adding categories. Can you guess it's name? That's right, we have `PatientProfiles::addCategories()` for this.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncdm$condition_occurrence %>%\n  addPriorObservation(indexDate = \"condition_start_date\") %>%\n  addCategories(\n    variable = \"prior_observation\",\n    categories = list(\"prior_observation_group\" = list(\n      c(0, 364), c(365, 999999) # Inf not currently supported as an upper bound \n    ))\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# Source:   table<dbplyr_007> [?? x 20]\n# Database: DuckDB 0.8.1 [eburn@Windows 10 x64:R 4.2.1/C:\\Users\\eburn\\AppData\\Local\\Temp\\RtmponzVhx\\file1306824223f.duckdb]\n   condition_occurrence_id person_id condition_concept_id condition_start_date\n                     <int>     <int>                <int> <date>              \n 1                       1         2               381316 1986-09-08          \n 2                       2         6               321042 2021-06-23          \n 3                       3         7               381316 2021-04-07          \n 4                       4         8             37311061 2021-01-08          \n 5                       5         8               437663 2021-01-08          \n 6                       6         8              4089228 2021-01-08          \n 7                       7         8               254761 2021-01-08          \n 8                       8        16               381316 2020-02-11          \n 9                       9        16               313217 2021-10-05          \n10                      10        18               317576 1993-08-08          \n# i more rows\n# i 16 more variables: condition_start_datetime <dttm>,\n#   condition_end_date <date>, condition_end_datetime <dttm>,\n#   condition_type_concept_id <int>, condition_status_concept_id <int>,\n#   stop_reason <chr>, provider_id <int>, visit_occurrence_id <int>,\n#   visit_detail_id <int>, condition_source_value <chr>,\n#   condition_source_concept_id <int>, condition_status_source_value <chr>, ...\n```\n:::\n:::\n\n\n## Adding custom variables\n\nWhile `PatientProfiles` provides a range of functions that can help add characteristics of interest, you may want to add other, custom features. Obviously we can't cover here all possible custom characteristics you may wish to add. However, custom features do generally come in two forms.\n\nThe first is where we want to add a new variable derived from other variables in our table. Here we'll be using `dplyr::mutate()`. For example, perhaps we just want to add a new variable to our observation period table containing the year of individuals' observation period start date.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncdm$observation_period <- cdm$observation_period %>% \n  mutate(observation_period_start_year = year(observation_period_start_date))\n\ncdm$observation_period %>% \n  glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: ??\nColumns: 6\nDatabase: DuckDB 0.8.1 [eburn@Windows 10 x64:R 4.2.1/C:\\Users\\eburn\\AppData\\Local\\Temp\\RtmponzVhx\\file1306824223f.duckdb]\n$ observation_period_id         <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1~\n$ person_id                     <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1~\n$ observation_period_start_date <date> 2014-05-09, 1977-04-11, 2014-04-19, 201~\n$ observation_period_end_date   <date> 2023-05-12, 1986-09-15, 2023-04-22, 202~\n$ period_type_concept_id        <int> 44814724, 44814724, 44814724, 44814724, ~\n$ observation_period_start_year <dbl> 2014, 1977, 2014, 2014, 2013, 2013, 2013~\n```\n:::\n:::\n\n\nThe second, normally more complex task, is adding a new variable that involves joining to some other table. This table may well have been created by some intermediate query that we wrote to derive the variable of interest. For example, lets say we want to add each number of condition occurrence records for each individual to the person table (remember that we saw how to calculate this in the previous chapter). Here we'll also create this as a new table containing just the information we're interested in and compute to a temporary table.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncondition_summary <- cdm$person %>% \n  left_join(cdm$condition_occurrence %>% \n  group_by(person_id) %>% \n  count(name = \"condition_occurrence_records\"),\n  by=\"person_id\") %>% \n  select(\"person_id\", \"condition_occurrence_records\") %>% \n  mutate(condition_occurrence_records = if_else(\n    is.na(condition_occurrence_records), \n    0, condition_occurrence_records)) %>% \n  computeQuery()\n\ncondition_summary %>% \n  glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: ??\nColumns: 2\nDatabase: DuckDB 0.8.1 [eburn@Windows 10 x64:R 4.2.1/C:\\Users\\eburn\\AppData\\Local\\Temp\\RtmponzVhx\\file1306824223f.duckdb]\n$ person_id                    <int> 2, 6, 7, 8, 16, 18, 25, 36, 40, 44, 47, 5~\n$ condition_occurrence_records <dbl> 1, 1, 1, 4, 2, 2, 1, 4, 1, 2, 5, 1, 3, 2,~\n```\n:::\n:::\n\n\n::: {.callout-tip collapse=\"true\"}\n## Taking care with joins\n\nWhen adding variables through joins we need to pay particular attention to the dimensions of the resulting table. While sometimes we may want to have additional rows added as well as new columns, this is often not desired. If we, for example, have a table with one row per person then a left join to a table with multiple rows per person will result in a table with f we, for example, have a table with one row per person then a left join to a table with multiple rows per person (unless those people with more than record are only in the second table).\n\nExamples where to be careful include when joining to the observation period table, as individuals can have multiple observation periods, and when working with cohorts (Which are the focus of the next chapter), as individuals can also enter the same study cohort multiple times.\n\nJust to underline how problematic joins can become if we don't take care, here we join the condition occurrence table and the drug exposure table both of which have multiple records per person. Remember this is just with our small synthetic data, so when working with real patient data which is oftentimes much, much larger this would be extremely problematic (and would unlikely be needed to answer any research question). In other words, don't try this at home!\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncdm$condition_occurrence %>% \n  tally()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# Source:   SQL [1 x 1]\n# Database: DuckDB 0.8.1 [eburn@Windows 10 x64:R 4.2.1/C:\\Users\\eburn\\AppData\\Local\\Temp\\RtmponzVhx\\file1306824223f.duckdb]\n      n\n  <dbl>\n1  9967\n```\n:::\n\n```{.r .cell-code}\ncdm$drug_exposure %>% \n  tally()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# Source:   SQL [1 x 1]\n# Database: DuckDB 0.8.1 [eburn@Windows 10 x64:R 4.2.1/C:\\Users\\eburn\\AppData\\Local\\Temp\\RtmponzVhx\\file1306824223f.duckdb]\n       n\n   <dbl>\n1 337509\n```\n:::\n\n```{.r .cell-code}\ncdm$condition_occurrence %>% \n  select(person_id, condition_start_date) %>% \n  left_join(cdm$drug_exposure %>% \n  select(person_id, drug_exposure_start_date), \n  by = \"person_id\") %>% \n  tally()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# Source:   SQL [1 x 1]\n# Database: DuckDB 0.8.1 [eburn@Windows 10 x64:R 4.2.1/C:\\Users\\eburn\\AppData\\Local\\Temp\\RtmponzVhx\\file1306824223f.duckdb]\n       n\n   <dbl>\n1 410683\n```\n:::\n:::\n\n:::\n\n\n## Large scale characterisation\nTO ADD",
    "supporting": [
      "ch_4_adding_features_files\\figure-pdf"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}