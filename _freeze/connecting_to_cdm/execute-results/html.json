{
  "hash": "7ab8198d57a1c4564786bd7724b9e943",
  "result": {
    "markdown": "# Creating a reference to the common data model\n\n## Connecting to a database from R using DBI\n\nDatabase connections from R can be made using the [DBI package](https://dbi.r-dbi.org/). The back-end for `DBI` is facilitated by database specific driver packages. As an example, lets say we want to work with a local duckdb from R. In this case the we can use the duckdb R package as the driver.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(DBI)\ndb<-dbConnect(duckdb::duckdb(), dbdir=\":memory:\")\n```\n:::\n\n\nIf we instead wanted to connect to other database management systems, these connections would be supported by the associated back-end packages and could look something like:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Postgres\ndb <- DBI::dbConnect(RPostgres::Postgres(),\n                      dbname = Sys.getenv(\"CDM5_POSTGRESQL_DBNAME\"),\n                      host = Sys.getenv(\"CDM5_POSTGRESQL_HOST\"),\n                      user = Sys.getenv(\"CDM5_POSTGRESQL_USER\"),\n                      password = Sys.getenv(\"CDM5_POSTGRESQL_PASSWORD\"))\n# Redshift (almost identical to Postgres)\ndb <- DBI::dbConnect(RPostgres::Redshift(),\n                      dbname   = Sys.getenv(\"CDM5_REDSHIFT_DBNAME\"),\n                      host     = Sys.getenv(\"CDM5_REDSHIFT_HOST\"),\n                      port     = Sys.getenv(\"CDM5_REDSHIFT_PORT\"),\n                      user     = Sys.getenv(\"CDM5_REDSHIFT_USER\"),\n                      password = Sys.getenv(\"CDM5_REDSHIFT_PASSWORD\"))\n# SQL Server\ndb <- DBI::dbConnect(odbc::odbc(),\n                      Driver   = \"ODBC Driver 18 for SQL Server\",\n                      Server   = Sys.getenv(\"CDM5_SQL_SERVER_SERVER\"),\n                      Database = Sys.getenv(\"CDM5_SQL_SERVER_CDM_DATABASE\"),\n                      UID      = Sys.getenv(\"CDM5_SQL_SERVER_USER\"),\n                      PWD      = Sys.getenv(\"CDM5_SQL_SERVER_PASSWORD\"),\n                      TrustServerCertificate=\"yes\",\n                      Port     = 1433)\n```\n:::\n\n\n## Creating a reference to the OMOP common data model\n\nIf we have connected to a database which contains data mapped to the format of the OMOP common data model the `CDMConnector` provides functionality to simplify our work with a database. Because we already know the structure of the common data model, `CDMConnector` can be used to create a reference to the various tables that are used.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(CDMConnector)\n```\n:::\n\n\nIn this case we'll use the Eunomia example data contained in a duckdb database.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndb <- DBI::dbConnect(duckdb::duckdb(), \n                     dbdir = CDMConnector::eunomia_dir())\ncdm <- CDMConnector::cdm_from_con(db, \n                                  cdm_schema = \"main\")\ncdm\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# OMOP CDM reference (tbl_duckdb_connection)\n\nTables: person, observation_period, visit_occurrence, visit_detail, condition_occurrence, drug_exposure, procedure_occurrence, measurement, observation, death, location, care_site, provider, drug_era, dose_era, condition_era, concept, vocabulary, concept_relationship, concept_ancestor, drug_strength\n```\n:::\n:::\n\n\nOnce we have created the our reference, we can read the tables with \"\\$\" operator or \\[\\[\"\"\\]\\].\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncdm$observation_period\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# Source:   table<main.observation_period> [?? x 5]\n# Database: DuckDB 0.5.0 [eburn@Windows 10 x64:R 4.2.1/C:\\Users\\eburn\\AppData\\Local\\Temp\\Rtmpqoo4N4/bxeovbro/cdm.duckdb]\n   observation_period_id person_id observation_period_start…¹ observat…² perio…³\n                   <dbl>     <dbl> <date>                     <date>       <dbl>\n 1                     6         6 1963-12-31                 2007-02-06  4.48e7\n 2                    13        13 2009-04-26                 2019-04-14  4.48e7\n 3                    27        27 2002-01-30                 2018-11-21  4.48e7\n 4                    16        16 1971-10-14                 2017-11-02  4.48e7\n 5                    55        55 2009-05-30                 2019-03-23  4.48e7\n 6                    60        60 1990-11-21                 2019-01-23  4.48e7\n 7                    42        42 1909-11-03                 2019-03-13  4.48e7\n 8                    33        33 1986-05-12                 2018-09-10  4.48e7\n 9                    18        18 1965-11-17                 2018-11-07  4.48e7\n10                    25        25 2007-03-18                 2019-04-07  4.48e7\n# … with more rows, and abbreviated variable names\n#   ¹​observation_period_start_date, ²​observation_period_end_date,\n#   ³​period_type_concept_id\n# ℹ Use `print(n = ...)` to see more rows\n```\n:::\n\n```{.r .cell-code}\ncdm[[\"observation_period\"]]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# Source:   table<main.observation_period> [?? x 5]\n# Database: DuckDB 0.5.0 [eburn@Windows 10 x64:R 4.2.1/C:\\Users\\eburn\\AppData\\Local\\Temp\\Rtmpqoo4N4/bxeovbro/cdm.duckdb]\n   observation_period_id person_id observation_period_start…¹ observat…² perio…³\n                   <dbl>     <dbl> <date>                     <date>       <dbl>\n 1                     6         6 1963-12-31                 2007-02-06  4.48e7\n 2                    13        13 2009-04-26                 2019-04-14  4.48e7\n 3                    27        27 2002-01-30                 2018-11-21  4.48e7\n 4                    16        16 1971-10-14                 2017-11-02  4.48e7\n 5                    55        55 2009-05-30                 2019-03-23  4.48e7\n 6                    60        60 1990-11-21                 2019-01-23  4.48e7\n 7                    42        42 1909-11-03                 2019-03-13  4.48e7\n 8                    33        33 1986-05-12                 2018-09-10  4.48e7\n 9                    18        18 1965-11-17                 2018-11-07  4.48e7\n10                    25        25 2007-03-18                 2019-04-07  4.48e7\n# … with more rows, and abbreviated variable names\n#   ¹​observation_period_start_date, ²​observation_period_end_date,\n#   ³​period_type_concept_id\n# ℹ Use `print(n = ...)` to see more rows\n```\n:::\n:::\n\n\nWhen we create our reference we could have also specified the tables we want to read:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncdm <- CDMConnector::cdm_from_con(db, \n                                  cdm_tables = c(\"person\",\"observation_period\"))\ncdm\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# OMOP CDM reference (tbl_duckdb_connection)\n\nTables: person, observation_period\n```\n:::\n:::\n\n\nMoreover, we can also specify the writable schema and the tables that we are interested in it when creating our reference. For example, if we wanted to create a reference to the person and observation period tables in the common data model along with cohort tables in a schema we have write access to, we could do this like so:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncdm <- CDMConnector::cdm_from_con(db,\n  cdm_schema = \"main\",\n  cdm_tables = c(\"person\",\"observation_period\"),\n  write_schema = \"results\",\n  cohort_tables = c(\"exposure_cohort\", \"outcome_cohort\"))\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}