{
  "hash": "8d7151d080ace8da43d835f21a074d33",
  "result": {
    "markdown": "# Adding a cohort\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(CDMConnector)\nlibrary(dplyr)\nlibrary(CodelistGenerator)\nlibrary(Capr)\n```\n:::\n\n\n\n## Defining a cohort definition\n\nWe can define a cohort programmatically using the Capr package. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncon <- DBI::dbConnect(duckdb::duckdb(), eunomia_dir())\n\ncdm <- CDMConnector::cdm_from_con(\n  con = con,\n  cdm_schema = \"main\",\n  write_schema = \"main\"\n)\n```\n:::\n\n\n\nLet´s say we want to identify people with a gastrointestinal hemorrhage. First we´ll need to identify the code ... and generate a conc\n\n::: {.cell}\n\n```{.r .cell-code}\ngibleed_codes <- getCandidateCodes(cdm = cdm, \n                  keywords = \"gastrointestinal hemorrhage\",\n                  domains = \"condition\",\n                  exactMatch = TRUE,\n                  includeDescendants = FALSE)\ngibleed_concept_set <- cs(descendants(gibleed_codes$concept_id))\n```\n:::\n\n\nWe can now us\n\n::: {.cell}\n\n```{.r .cell-code}\ngibleed_cohort_definition <- cohort(\n   entry = entry(\n    condition(gibleed_concept_set),\n    primaryCriteriaLimit = \"First\"\n  ))\n```\n:::\n\n\nLet´s make things a little more complicated. We´ll exclude people with rheumatoid arthritis (regardless of when they were diagnosed). We´ll also require that people \n\n\n::: {.cell}\n\n```{.r .cell-code}\nrheumatoid_arthritis_codes <- getCandidateCodes(cdm = cdm, \n                  keywords = \"rheumatoid arthritis\",\n                  domains = \"condition\",\n                  exactMatch = TRUE,\n                  includeDescendants = FALSE)\nrheumatoid_arthritis_concept_set <- cs(descendants(\n  rheumatoid_arthritis_codes$concept_id))\n\n\n\ngibleed_no_RA_cohort_definition <- cohort(\n   entry = entry(\n    condition(gibleed_concept_set),\n    observationWindow = continuousObservation(0L, 0L),\n    primaryCriteriaLimit = \"First\"\n  ),\n  attrition = attrition(\n    \"no RA\" = withAll(\n      exactly(0,\n              condition(rheumatoid_arthritis_concept_set),\n              duringInterval(eventStarts(-Inf, Inf))))\n  ))\n\n\n\n\npath <- file.path(tempdir(), \"cohorts\")\ndir.create(path)\nwriteCohort(gibleed_cohort_definition, file.path(path, \"gibleed.json\"))\ngibleed_cohort_set <- readCohortSet(path = path)\n\n\n\n# cdm <- generateCohortSet(\n#   cdm,\n#   gibleed_cohort_set,\n#   name = \"gibleed\",\n#   computeAttrition = TRUE\n# )\n```\n:::\n\n\n::: {.callout-tip collapse=\"true\"}\n\n\n## JSON representation of a cohort\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncat(as.json(gibleed_concept_set))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{\n  \"items\": [\n    {\n      \"concept\": {\n        \"CONCEPT_ID\": 192671,\n        \"CONCEPT_NAME\": \"\",\n        \"STANDARD_CONCEPT\": \"\",\n        \"STANDARD_CONCEPT_CAPTION\": \"\",\n        \"INVALID_REASON\": \"\",\n        \"INVALID_REASON_CAPTION\": \"\",\n        \"CONCEPT_CODE\": \"\",\n        \"DOMAIN_ID\": \"\",\n        \"VOCABULARY_ID\": \"\",\n        \"CONCEPT_CLASS_ID\": \"\"\n      },\n      \"isExcluded\": false,\n      \"includeDescendants\": true,\n      \"includeMapped\": false\n    }\n  ]\n}\n```\n:::\n\n```{.r .cell-code}\ncat(as.json(rheumatoid_arthritis_concept_set))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{\n  \"items\": [\n    {\n      \"concept\": {\n        \"CONCEPT_ID\": 80809,\n        \"CONCEPT_NAME\": \"\",\n        \"STANDARD_CONCEPT\": \"\",\n        \"STANDARD_CONCEPT_CAPTION\": \"\",\n        \"INVALID_REASON\": \"\",\n        \"INVALID_REASON_CAPTION\": \"\",\n        \"CONCEPT_CODE\": \"\",\n        \"DOMAIN_ID\": \"\",\n        \"VOCABULARY_ID\": \"\",\n        \"CONCEPT_CLASS_ID\": \"\"\n      },\n      \"isExcluded\": false,\n      \"includeDescendants\": true,\n      \"includeMapped\": false\n    }\n  ]\n}\n```\n:::\n:::\n\n\n:::\n\n\n::: {.callout-tip collapse=\"true\"}\n\n\n## JSON representation of a cohort\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncat(as.json((gibleed_cohort_definition)))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{\n  \"ConceptSets\": [\n    {\n      \"id\": 0,\n      \"name\": \"\",\n      \"expression\": {\n        \"items\": [\n          {\n            \"concept\": {\n              \"CONCEPT_ID\": 192671,\n              \"CONCEPT_NAME\": \"\",\n              \"STANDARD_CONCEPT\": \"\",\n              \"STANDARD_CONCEPT_CAPTION\": \"\",\n              \"INVALID_REASON\": \"\",\n              \"INVALID_REASON_CAPTION\": \"\",\n              \"CONCEPT_CODE\": \"\",\n              \"DOMAIN_ID\": \"\",\n              \"VOCABULARY_ID\": \"\",\n              \"CONCEPT_CLASS_ID\": \"\"\n            },\n            \"isExcluded\": false,\n            \"includeDescendants\": true,\n            \"includeMapped\": false\n          }\n        ]\n      }\n    }\n  ],\n  \"PrimaryCriteria\": {\n    \"CriteriaList\": [\n      {\n        \"ConditionOccurrence\": {\n          \"CodesetId\": 0\n        }\n      }\n    ],\n    \"ObservationWindow\": {\n      \"PriorDays\": 0,\n      \"PostDays\": 0\n    },\n    \"PrimaryCriteriaLimit\": {\n      \"Type\": \"First\"\n    }\n  },\n  \"QualifiedLimit\": {\n    \"Type\": \"First\"\n  },\n  \"ExpressionLimit\": {\n    \"Type\": \"First\"\n  },\n  \"InclusionRules\": [],\n  \"CensoringCriteria\": [],\n  \"CollapseSettings\": {\n    \"CollapseType\": \"ERA\",\n    \"EraPad\": 0\n  },\n  \"CensorWindow\": {},\n  \"cdmVersionRange\": \">=5.0.0\"\n}\n```\n:::\n\n```{.r .cell-code}\ncat(as.json((gibleed_no_RA_cohort_definition)))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{\n  \"ConceptSets\": [\n    {\n      \"id\": 0,\n      \"name\": \"\",\n      \"expression\": {\n        \"items\": [\n          {\n            \"concept\": {\n              \"CONCEPT_ID\": 192671,\n              \"CONCEPT_NAME\": \"\",\n              \"STANDARD_CONCEPT\": \"\",\n              \"STANDARD_CONCEPT_CAPTION\": \"\",\n              \"INVALID_REASON\": \"\",\n              \"INVALID_REASON_CAPTION\": \"\",\n              \"CONCEPT_CODE\": \"\",\n              \"DOMAIN_ID\": \"\",\n              \"VOCABULARY_ID\": \"\",\n              \"CONCEPT_CLASS_ID\": \"\"\n            },\n            \"isExcluded\": false,\n            \"includeDescendants\": true,\n            \"includeMapped\": false\n          }\n        ]\n      }\n    },\n    {\n      \"id\": 1,\n      \"name\": \"\",\n      \"expression\": {\n        \"items\": [\n          {\n            \"concept\": {\n              \"CONCEPT_ID\": 80809,\n              \"CONCEPT_NAME\": \"\",\n              \"STANDARD_CONCEPT\": \"\",\n              \"STANDARD_CONCEPT_CAPTION\": \"\",\n              \"INVALID_REASON\": \"\",\n              \"INVALID_REASON_CAPTION\": \"\",\n              \"CONCEPT_CODE\": \"\",\n              \"DOMAIN_ID\": \"\",\n              \"VOCABULARY_ID\": \"\",\n              \"CONCEPT_CLASS_ID\": \"\"\n            },\n            \"isExcluded\": false,\n            \"includeDescendants\": true,\n            \"includeMapped\": false\n          }\n        ]\n      }\n    }\n  ],\n  \"PrimaryCriteria\": {\n    \"CriteriaList\": [\n      {\n        \"ConditionOccurrence\": {\n          \"CodesetId\": 0\n        }\n      }\n    ],\n    \"ObservationWindow\": {\n      \"PriorDays\": 0,\n      \"PostDays\": 0\n    },\n    \"PrimaryCriteriaLimit\": {\n      \"Type\": \"First\"\n    }\n  },\n  \"QualifiedLimit\": {\n    \"Type\": \"First\"\n  },\n  \"ExpressionLimit\": {\n    \"Type\": \"First\"\n  },\n  \"InclusionRules\": [\n    {\n      \"name\": \"no RA\",\n      \"expression\": {\n        \"Type\": \"ALL\",\n        \"CriteriaList\": [\n          {\n            \"Criteria\": {\n              \"ConditionOccurrence\": {\n                \"CodesetId\": 1\n              }\n            },\n            \"StartWindow\": {\n              \"Start\": {\n                \"Coeff\": -1\n              },\n              \"End\": {\n                \"Coeff\": 1\n              },\n              \"UseIndexEnd\": false,\n              \"UseEventEnd\": false\n            },\n            \"Occurrence\": {\n              \"Type\": 0,\n              \"Count\": 0\n            }\n          }\n        ],\n        \"DemographicCriteriaList\": [],\n        \"Groups\": []\n      }\n    }\n  ],\n  \"CensoringCriteria\": [],\n  \"CollapseSettings\": {\n    \"CollapseType\": \"ERA\",\n    \"EraPad\": 0\n  },\n  \"CensorWindow\": {},\n  \"cdmVersionRange\": \">=5.0.0\"\n}\n```\n:::\n:::\n\n\n:::\n\n\n## Adding a cohort to the CDM\n\nvia cdm connector\n\n## Cohort summary\n\nAttributes: Cohort count, settings, attrition .....\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}