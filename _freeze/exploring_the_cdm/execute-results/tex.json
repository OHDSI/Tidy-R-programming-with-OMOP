{
  "hash": "c39307363a261e1f967255eaca220c75",
  "result": {
    "markdown": "## Exploring the CDM\n\nLet's first connect again to our Eunomia data and create the reference to the common data model.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(DBI)\nlibrary(dplyr)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'dplyr'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n```\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\n\n### tally()\n\nLet's say we want to get a count of the people in the person table. For this we can use the tally or count verbs from dbplyr\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncdm$person %>% \n  count()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# Source:   SQL [1 x 1]\n# Database: DuckDB 0.5.0 [eburn@Windows 10 x64:R 4.2.1/C:\\Users\\eburn\\AppData\\Local\\Temp\\RtmpI12iuF/yrcpvsnj/cdm.duckdb]\n      n\n  <dbl>\n1  2694\n```\n:::\n:::\n\n\n\nThis count was done on the database side, with the code we wrote in dplyr style translated into sql.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncdm$person %>% \n  count() %>% \n  show_query()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<SQL>\nSELECT COUNT(*) AS n\nFROM main.person\n```\n:::\n:::\n\n\n\n\n### summarise()\nAnother way to get the same count would be to use the summarise verb\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncdm$person %>% \n  summarise(n = n())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# Source:   SQL [1 x 1]\n# Database: DuckDB 0.5.0 [eburn@Windows 10 x64:R 4.2.1/C:\\Users\\eburn\\AppData\\Local\\Temp\\RtmpI12iuF/yrcpvsnj/cdm.duckdb]\n      n\n  <dbl>\n1  2694\n```\n:::\n\n```{.r .cell-code}\ncdm$person %>% \n  summarise(n = n())%>% \n  show_query()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<SQL>\nSELECT COUNT(*) AS n\nFROM main.person\n```\n:::\n:::\n\n\n\nWe can also use summarise for various other calculations\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncdm$person %>% \n  summarise(median = median(year_of_birth, na.rm=TRUE))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# Source:   SQL [1 x 1]\n# Database: DuckDB 0.5.0 [eburn@Windows 10 x64:R 4.2.1/C:\\Users\\eburn\\AppData\\Local\\Temp\\RtmpI12iuF/yrcpvsnj/cdm.duckdb]\n  median\n   <dbl>\n1   1961\n```\n:::\n\n```{.r .cell-code}\ncdm$person %>% \n  summarise(median = median(year_of_birth, na.rm=TRUE))%>% \n  show_query()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<SQL>\nSELECT PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY year_of_birth) AS median\nFROM main.person\n```\n:::\n:::\n\n\n\n### group_by()\nWhat if we want to get a count of people in the person table by gender concept id? In this case we can use group_by \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncdm$person %>% \n  group_by(gender_concept_id) %>% \n  count()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# Source:   SQL [2 x 2]\n# Database: DuckDB 0.5.0 [eburn@Windows 10 x64:R 4.2.1/C:\\Users\\eburn\\AppData\\Local\\Temp\\RtmpI12iuF/yrcpvsnj/cdm.duckdb]\n  gender_concept_id     n\n              <dbl> <dbl>\n1              8532  1373\n2              8507  1321\n```\n:::\n\n```{.r .cell-code}\ncdm$person %>% \n  group_by(gender_concept_id) %>% \n  count() %>% \n  show_query()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<SQL>\nSELECT gender_concept_id, COUNT(*) AS n\nFROM main.person\nGROUP BY gender_concept_id\n```\n:::\n:::\n\n\n\nSimilarly we could use group_by to calculate median year of birth by gender concept id.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncdm$person %>% \n  group_by(gender_concept_id) %>% \n  summarise(median = median(year_of_birth, na.rm=TRUE))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# Source:   SQL [2 x 2]\n# Database: DuckDB 0.5.0 [eburn@Windows 10 x64:R 4.2.1/C:\\Users\\eburn\\AppData\\Local\\Temp\\RtmpI12iuF/yrcpvsnj/cdm.duckdb]\n  gender_concept_id median\n              <dbl>  <dbl>\n1              8532   1961\n2              8507   1961\n```\n:::\n\n```{.r .cell-code}\ncdm$person %>% \n  group_by(gender_concept_id) %>% \n  summarise(median = median(year_of_birth, na.rm=TRUE)) %>% \n  show_query()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<SQL>\nSELECT\n  gender_concept_id,\n  PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY year_of_birth) AS median\nFROM main.person\nGROUP BY gender_concept_id\n```\n:::\n:::\n\n\n\n### filter()\nOr if we wanted a count within only for those with a specific gender concept id we can use the filter verb to subset the data before summarising it \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncdm$person %>% \n  filter(gender_concept_id == \"8532\") %>% \n  count()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# Source:   SQL [1 x 1]\n# Database: DuckDB 0.5.0 [eburn@Windows 10 x64:R 4.2.1/C:\\Users\\eburn\\AppData\\Local\\Temp\\RtmpI12iuF/yrcpvsnj/cdm.duckdb]\n      n\n  <dbl>\n1  1373\n```\n:::\n\n```{.r .cell-code}\ncdm$person %>% \n  filter(gender_concept_id == \"8532\") %>% \n  count() %>% \n  show_query()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<SQL>\nSELECT COUNT(*) AS n\nFROM main.person\nWHERE (gender_concept_id = '8532')\n```\n:::\n:::\n\n\n\nSimilarly we could have \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncdm$person %>% \n  filter(year_of_birth < 1970) %>% \n  summarise(median = median(year_of_birth, na.rm=TRUE))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# Source:   SQL [1 x 1]\n# Database: DuckDB 0.5.0 [eburn@Windows 10 x64:R 4.2.1/C:\\Users\\eburn\\AppData\\Local\\Temp\\RtmpI12iuF/yrcpvsnj/cdm.duckdb]\n  median\n   <dbl>\n1   1955\n```\n:::\n\n```{.r .cell-code}\ncdm$person %>% \n  filter(year_of_birth < 1970) %>% \n  summarise(median = median(year_of_birth, na.rm=TRUE))%>% \n  show_query()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<SQL>\nSELECT PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY year_of_birth) AS median\nFROM main.person\nWHERE (year_of_birth < 1970.0)\n```\n:::\n:::\n\n\n\nWe can combine the above, with a filter, followed by a group_by, and then followed by a summarise\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncdm$person %>% \n  filter(year_of_birth < 1970) %>% \n  group_by(gender_concept_id) %>% \n  summarise(median = median(year_of_birth, na.rm=TRUE))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# Source:   SQL [2 x 2]\n# Database: DuckDB 0.5.0 [eburn@Windows 10 x64:R 4.2.1/C:\\Users\\eburn\\AppData\\Local\\Temp\\RtmpI12iuF/yrcpvsnj/cdm.duckdb]\n  gender_concept_id median\n              <dbl>  <dbl>\n1              8532   1955\n2              8507   1956\n```\n:::\n\n```{.r .cell-code}\ncdm$person %>% \n  filter(year_of_birth < 1970) %>% \n  group_by(gender_concept_id) %>% \n  summarise(median = median(year_of_birth, na.rm=TRUE))%>% \n  show_query()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<SQL>\nSELECT\n  gender_concept_id,\n  PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY year_of_birth) AS median\nFROM main.person\nWHERE (year_of_birth < 1970.0)\nGROUP BY gender_concept_id\n```\n:::\n:::\n",
    "supporting": [
      "exploring_the_cdm_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}