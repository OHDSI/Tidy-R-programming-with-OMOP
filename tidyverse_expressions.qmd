# Supported expressions {#sec-tidyverse_expressions}

In the previous chapter @sec-dbplyr_verbs we saw that there are a core set of tidyverse functions that can be used with databases. In general, although the SQL they get turned into may vary depending on the database management system we are using, we can assume that if they are supported for one system they will be for others with a DBI backend package. 

Within these functions we can use various expressions. For example, when using `mutate()` to add a new variable to a table we might use the stringr package to help us define a new variable based on existing strings. Such expessions may, however, not always be supported for databases or may only be supported for some specific types. 

For example, below we can see that we could use the base `months()` function with postgres but not with MS SQL for which there is not a ready translation.

```{r, warning=FALSE, message=FALSE, error=TRUE}
options(dplyr.strict_sql = TRUE) # force error if no known translation

library(dplyr)
library(dbplyr)
library(duckdb)
library(bit64)
library(clock)

lazy_frame(my_date = as.Date("2000-01-01"), 
           con = simulate_postgres()) |> 
  mutate(month = months(my_date)) |> 
  show_query()

lazy_frame(my_date = as.Date("2000-01-01"), 
           con = simulate_mssql()) |> 
  mutate(month = months(my_date)) |> 
  show_query()
```

When writing code which we want to work across different database management systems we need to keep in mind what is supported where. To help with this, the sections below summarise available translations for common packages we might wish to use.

## Data types

Commonly used data types are generally consistently supported across database backends. We can use the base as.numeric(), as.integer(), as.charater(), as.Date(),and as.POSIXct(). We can also use as.integer64() from the bit64 to coerce to interger64, and the as_date() and as_datetime() from the clock package.

::: {.callout-tip collapse="true"}
### Show SQL
::: {.panel-tabset collapse="true"}

### duckdb
```{r, message=FALSE, warning=FALSE, error=TRUE}
translate_sql(as.numeric(var), 
              con = simulate_duckdb())
translate_sql(as.integer(var), 
              con = simulate_duckdb())
translate_sql(as.integer64(var), 
              con = simulate_duckdb())
translate_sql(as.character(var), 
              con = simulate_duckdb())
translate_sql(as.Date(var), 
              con = simulate_duckdb())
translate_sql(as_date(var), 
              con = simulate_duckdb())
translate_sql(as.POSIXct(var), 
              con = simulate_duckdb())
translate_sql(as_datetime(var), 
              con = simulate_duckdb())
translate_sql(as.logical(var), 
              con = simulate_duckdb())
```

### Redshift
```{r, message=FALSE, warning=FALSE, error=TRUE}
translate_sql(as.numeric(var), 
              con = simulate_redshift())
translate_sql(as.integer(var), 
              con = simulate_redshift())
translate_sql(as.integer64(var), 
              con = simulate_redshift())
translate_sql(as.character(var), 
              con = simulate_redshift())
translate_sql(as.Date(var), 
              con = simulate_redshift())
translate_sql(as_date(var), 
              con = simulate_redshift())
translate_sql(as.POSIXct(var), 
              con = simulate_redshift())
translate_sql(as_datetime(var), 
              con = simulate_redshift())
translate_sql(as.logical(var), 
              con = simulate_redshift())
```

### Postgres
```{r, message=FALSE, warning=FALSE, error=TRUE}
translate_sql(as.numeric(var), 
              con = simulate_postgres())
translate_sql(as.integer(var), 
              con = simulate_postgres())
translate_sql(as.integer64(var), 
              con = simulate_postgres())
translate_sql(as.character(var), 
              con = simulate_postgres())
translate_sql(as.Date(var), 
              con = simulate_postgres())
translate_sql(as_date(var), 
              con = simulate_postgres())
translate_sql(as.POSIXct(var), 
              con = simulate_postgres())
translate_sql(as_datetime(var), 
              con = simulate_postgres())
translate_sql(as.logical(var), 
              con = simulate_postgres())
```

### Snowflake
```{r, message=FALSE, warning=FALSE, error=TRUE}
translate_sql(as.numeric(var), 
              con = simulate_snowflake())
translate_sql(as.integer(var), 
              con = simulate_snowflake())
translate_sql(as.integer64(var), 
              con = simulate_snowflake())
translate_sql(as.character(var), 
              con = simulate_snowflake())
translate_sql(as.Date(var), 
              con = simulate_snowflake())
translate_sql(as_date(var), 
              con = simulate_snowflake())
translate_sql(as.POSIXct(var), 
              con = simulate_snowflake())
translate_sql(as_datetime(var), 
              con = simulate_snowflake())
translate_sql(as.logical(var), 
              con = simulate_snowflake())
```

### Spark
```{r, message=FALSE, warning=FALSE, error=TRUE}
translate_sql(as.numeric(var), 
              con = simulate_spark_sql())
translate_sql(as.integer(var), 
              con = simulate_spark_sql())
translate_sql(as.integer64(var), 
              con = simulate_spark_sql())
translate_sql(as.character(var), 
              con = simulate_spark_sql())
translate_sql(as.Date(var), 
              con = simulate_spark_sql())
translate_sql(as_date(var), 
              con = simulate_spark_sql())
translate_sql(as.POSIXct(var), 
              con = simulate_spark_sql())
translate_sql(as_datetime(var), 
              con = simulate_spark_sql())
translate_sql(as.logical(var), 
              con = simulate_spark_sql())
```

### SQL Server
```{r, message=FALSE, warning=FALSE, error=TRUE}
translate_sql(as.numeric(var), 
              con = simulate_mssql())
translate_sql(as.integer(var), 
              con = simulate_mssql())
translate_sql(as.integer64(var), 
              con = simulate_mssql())
translate_sql(as.character(var), 
              con = simulate_mssql())
translate_sql(as.Date(var), 
              con = simulate_mssql())
translate_sql(as_date(var), 
              con = simulate_mssql())
translate_sql(as.POSIXct(var), 
              con = simulate_mssql())
translate_sql(as_datetime(var), 
              con = simulate_mssql())
translate_sql(as.logical(var), 
              con = simulate_mssql())
```


:::
:::

## Comparison and logical operators

Base r comparison operators, such as <, <=, ==, >=, >, are supported in all database backends. Logical operators, such as & and | are also supported.

::: {.callout-tip collapse="true"}
### Show SQL
::: {.panel-tabset collapse="true"}

### duckdb
```{r, message=FALSE, warning=FALSE, error=TRUE}
translate_sql(var_1 == var_2, 
              con = simulate_duckdb())
translate_sql(var_1 >= var_2, 
              con = simulate_duckdb())
translate_sql(var_1 < 100, 
              con = simulate_duckdb())
translate_sql(var_1 %in% c("a", "b", "c"), 
              con = simulate_duckdb())
translate_sql(!var_1 %in% c("a", "b", "c"), 
              con = simulate_duckdb())
translate_sql(is.na(var_1), 
              con = simulate_duckdb())
translate_sql(!is.na(var_1), 
              con = simulate_duckdb())
translate_sql(var_1 >= 100 & var_1  < 200, 
              con = simulate_duckdb())
translate_sql(var_1 >= 100 | var_1  < 200, 
              con = simulate_duckdb())

```

### Redshift
```{r, message=FALSE, warning=FALSE, error=TRUE}
translate_sql(var_1 == var_2, 
              con = simulate_redshift())
translate_sql(var_1 >= var_2, 
              con = simulate_redshift())
translate_sql(var_1 < 100, 
              con = simulate_redshift())
translate_sql(var_1 %in% c("a", "b", "c"), 
              con = simulate_redshift())
translate_sql(!var_1 %in% c("a", "b", "c"), 
              con = simulate_redshift())
translate_sql(is.na(var_1), 
              con = simulate_redshift())
translate_sql(!is.na(var_1), 
              con = simulate_redshift())
translate_sql(var_1 >= 100 & var_1  < 200, 
              con = simulate_redshift())
translate_sql(var_1 >= 100 | var_1  < 200, 
              con = simulate_redshift())
```

### Postgres
```{r, message=FALSE, warning=FALSE, error=TRUE}
translate_sql(var_1 == var_2, 
              con = simulate_postgres())
translate_sql(var_1 >= var_2, 
              con = simulate_postgres())
translate_sql(var_1 < 100, 
              con = simulate_postgres())
translate_sql(var_1 %in% c("a", "b", "c"), 
              con = simulate_postgres())
translate_sql(!var_1 %in% c("a", "b", "c"), 
              con = simulate_postgres())
translate_sql(is.na(var_1), 
              con = simulate_postgres())
translate_sql(!is.na(var_1), 
              con = simulate_postgres())
translate_sql(var_1 >= 100 & var_1  < 200, 
              con = simulate_postgres())
translate_sql(var_1 >= 100 | var_1  < 200, 
              con = simulate_postgres())
```

### Snowflake
```{r, message=FALSE, warning=FALSE, error=TRUE}
translate_sql(var_1 == var_2, 
              con = simulate_snowflake())
translate_sql(var_1 >= var_2, 
              con = simulate_snowflake())
translate_sql(var_1 < 100, 
              con = simulate_snowflake())
translate_sql(var_1 %in% c("a", "b", "c"), 
              con = simulate_snowflake())
translate_sql(!var_1 %in% c("a", "b", "c"), 
              con = simulate_snowflake())
translate_sql(is.na(var_1), 
              con = simulate_snowflake())
translate_sql(!is.na(var_1), 
              con = simulate_snowflake())
translate_sql(var_1 >= 100 & var_1  < 200, 
              con = simulate_snowflake())
translate_sql(var_1 >= 100 | var_1  < 200, 
              con = simulate_snowflake())
```

### Spark
```{r, message=FALSE, warning=FALSE, error=TRUE}
translate_sql(var_1 == var_2, 
              con = simulate_spark_sql())
translate_sql(var_1 >= var_2, 
              con = simulate_spark_sql())
translate_sql(var_1 < 100, 
              con = simulate_spark_sql())
translate_sql(var_1 %in% c("a", "b", "c"), 
              con = simulate_spark_sql())
translate_sql(!var_1 %in% c("a", "b", "c"), 
              con = simulate_spark_sql())
translate_sql(is.na(var_1), 
              con = simulate_spark_sql())
translate_sql(!is.na(var_1), 
              con = simulate_spark_sql())
translate_sql(var_1 >= 100 & var_1  < 200, 
              con = simulate_spark_sql())
translate_sql(var_1 >= 100 | var_1  < 200, 
              con = simulate_spark_sql())
```

### SQL Server
```{r, message=FALSE, warning=FALSE, error=TRUE}
translate_sql(var_1 == var_2, 
              con = simulate_mssql())
translate_sql(var_1 >= var_2, 
              con = simulate_mssql())
translate_sql(var_1 < 100, 
              con = simulate_mssql())
translate_sql(var_1 %in% c("a", "b", "c"), 
              con = simulate_mssql())
translate_sql(!var_1 %in% c("a", "b", "c"), 
              con = simulate_mssql())
translate_sql(is.na(var_1), 
              con = simulate_mssql())
translate_sql(!is.na(var_1), 
              con = simulate_mssql())
translate_sql(var_1 >= 100 & var_1  < 200, 
              con = simulate_mssql())
translate_sql(var_1 >= 100 | var_1  < 200, 
              con = simulate_mssql())
```


:::
:::

## IF / ELSE

The base ifelse function, along with if_else and case_when from dplyr are transalated for each database backend.

::: {.callout-tip collapse="true"}
### Show SQL
::: {.panel-tabset collapse="true"}

### duckdb
```{r, message=FALSE, warning=FALSE, error=TRUE}
translate_sql(ifelse(var == "a", 1L, 2L), 
              con = simulate_duckdb())
translate_sql(if_else(var == "a", 1L, 2L), 
              con = simulate_duckdb())
translate_sql(case_when(var == "a" ~ 1L, .default = 2L), 
              con = simulate_duckdb())
translate_sql(case_when(var == "a" ~ 1L, 
                        var == "b" ~ 2L, 
                        var == "c" ~ 3L, 
                        .default = NULL), 
              con = simulate_duckdb())
```

### Redshift
```{r, message=FALSE, warning=FALSE, error=TRUE}
translate_sql(ifelse(var == "a", 1L, 2L), 
              con = simulate_redshift())
translate_sql(if_else(var == "a", 1L, 2L), 
              con = simulate_redshift())
translate_sql(case_when(var == "a" ~ 1L, .default = 2L), 
              con = simulate_redshift())
translate_sql(case_when(var == "a" ~ 1L, 
                        var == "b" ~ 2L, 
                        var == "c" ~ 3L, 
                        .default = NULL), 
              con = simulate_redshift())
```

### Postgres
```{r, message=FALSE, warning=FALSE, error=TRUE}
translate_sql(ifelse(var == "a", 1L, 2L), 
              con = simulate_postgres())
translate_sql(if_else(var == "a", 1L, 2L), 
              con = simulate_postgres())
translate_sql(case_when(var == "a" ~ 1L, .default = 2L), 
              con = simulate_postgres())
translate_sql(case_when(var == "a" ~ 1L, 
                        var == "b" ~ 2L, 
                        var == "c" ~ 3L, 
                        .default = NULL), 
              con = simulate_postgres())
```

### Snowflake
```{r, message=FALSE, warning=FALSE, error=TRUE}
translate_sql(ifelse(var == "a", 1L, 2L), 
              con = simulate_snowflake())
translate_sql(if_else(var == "a", 1L, 2L), 
              con = simulate_snowflake())
translate_sql(case_when(var == "a" ~ 1L, .default = 2L), 
              con = simulate_snowflake())
translate_sql(case_when(var == "a" ~ 1L, 
                        var == "b" ~ 2L, 
                        var == "c" ~ 3L, 
                        .default = NULL), 
              con = simulate_snowflake())
```

### Spark
```{r, message=FALSE, warning=FALSE, error=TRUE}
translate_sql(ifelse(var == "a", 1L, 2L), 
              con = simulate_spark_sql())
translate_sql(if_else(var == "a", 1L, 2L), 
              con = simulate_spark_sql())
translate_sql(case_when(var == "a" ~ 1L, .default = 2L), 
              con = simulate_spark_sql())
translate_sql(case_when(var == "a" ~ 1L, 
                        var == "b" ~ 2L, 
                        var == "c" ~ 3L, 
                        .default = NULL), 
              con = simulate_spark_sql())
```

### SQL Server
```{r, message=FALSE, warning=FALSE, error=TRUE}
translate_sql(ifelse(var == "a", 1L, 2L), 
              con = simulate_mssql())
translate_sql(if_else(var == "a", 1L, 2L), 
              con = simulate_mssql())
translate_sql(case_when(var == "a" ~ 1L, .default = 2L), 
              con = simulate_mssql())
translate_sql(case_when(var == "a" ~ 1L, 
                        var == "b" ~ 2L, 
                        var == "c" ~ 3L, 
                        .default = NULL), 
              con = simulate_mssql())
```


:::
:::

## Working with strings

There is much more variation in support of functions to work with strings


::: {.callout-tip collapse="true"}
### Show SQL
::: {.panel-tabset collapse="true"}

### duckdb
```{r, message=FALSE, warning=FALSE, error=TRUE}
library(stringr)

translate_sql(nchar(var), 
              con = simulate_duckdb())
translate_sql(nzchar(var), 
              con = simulate_duckdb())
translate_sql(substr(var, 1, 2), 
              con = simulate_duckdb())
translate_sql(trimws(var), 
              con = simulate_duckdb())
translate_sql(tolower(var), 
              con = simulate_duckdb())
translate_sql(str_to_lower(var), 
              con = simulate_duckdb())
translate_sql(toupper(var), 
              con = simulate_duckdb())
translate_sql(str_to_upper(var), 
              con = simulate_duckdb())
translate_sql(str_to_title(var), 
              con = simulate_duckdb())
translate_sql(str_trim(var), 
              con = simulate_duckdb())
translate_sql(str_squish(var), 
              con = simulate_duckdb())
translate_sql(str_detect(var, "b"), 
              con = simulate_duckdb())
translate_sql(str_detect(var, "b", negate = TRUE), 
              con = simulate_duckdb())
translate_sql(str_detect(var, "[aeiou]"), 
              con = simulate_duckdb())
translate_sql(str_replace(var, "a", "b"), 
              con = simulate_duckdb())
translate_sql(str_replace_all(var, "a", "b"), 
              con = simulate_duckdb())
translate_sql(str_remove(var, "a"), 
              con = simulate_duckdb())
translate_sql(str_remove_all(var, "a"), 
              con = simulate_duckdb())
translate_sql(str_like(var, "a"), 
              con = simulate_duckdb())
translate_sql(str_starts(var, "a"), 
              con = simulate_duckdb())
translate_sql(str_ends(var, "a"), 
              con = simulate_duckdb())
```

### Redshift
```{r, message=FALSE, warning=FALSE, error=TRUE}
translate_sql(nchar(var), 
              con = simulate_redshift())
translate_sql(nzchar(var), 
              con = simulate_redshift())
translate_sql(substr(var, 1, 2), 
              con = simulate_redshift())
translate_sql(trimws(var), 
              con = simulate_redshift())
translate_sql(tolower(var), 
              con = simulate_redshift())
translate_sql(str_to_lower(var), 
              con = simulate_redshift())
translate_sql(toupper(var), 
              con = simulate_redshift())
translate_sql(str_to_upper(var), 
              con = simulate_redshift())
translate_sql(str_to_title(var), 
              con = simulate_redshift())
translate_sql(str_trim(var), 
              con = simulate_redshift())
translate_sql(str_squish(var), 
              con = simulate_redshift())
translate_sql(str_detect(var, "b"), 
              con = simulate_redshift())
translate_sql(str_detect(var, "b", negate = TRUE), 
              con = simulate_redshift())
translate_sql(str_detect(var, "[aeiou]"), 
              con = simulate_redshift())
translate_sql(str_replace(var, "a", "b"),
              con = simulate_redshift())
translate_sql(str_replace_all(var, "a", "b"), 
              con = simulate_redshift())
translate_sql(str_remove(var, "a"), 
              con = simulate_redshift())
translate_sql(str_remove_all(var, "a"), 
              con = simulate_redshift())
translate_sql(str_like(var, "a"), 
              con = simulate_redshift())
translate_sql(str_starts(var, "a"),
              con = simulate_redshift())
translate_sql(str_ends(var, "a"),
              con = simulate_redshift())
```

### Postgres
```{r, message=FALSE, warning=FALSE, error=TRUE}
translate_sql(nchar(var), 
              con = simulate_postgres())
translate_sql(nzchar(var), 
              con = simulate_postgres())
translate_sql(substr(var, 1, 2), 
              con = simulate_postgres())
translate_sql(trimws(var), 
              con = simulate_postgres())
translate_sql(tolower(var), 
              con = simulate_postgres())
translate_sql(str_to_lower(var), 
              con = simulate_postgres())
translate_sql(toupper(var), 
              con = simulate_postgres())
translate_sql(str_to_upper(var), 
              con = simulate_postgres())
translate_sql(str_to_title(var), 
              con = simulate_postgres())
translate_sql(str_trim(var), 
              con = simulate_postgres())
translate_sql(str_squish(var), 
              con = simulate_postgres())
translate_sql(str_detect(var, "b"), 
              con = simulate_postgres())
translate_sql(str_detect(var, "b", negate = TRUE), 
              con = simulate_postgres())
translate_sql(str_detect(var, "[aeiou]"), 
              con = simulate_postgres())
translate_sql(str_replace(var, "a", "b"), 
              con = simulate_postgres())
translate_sql(str_replace_all(var, "a", "b"), 
              con = simulate_postgres())
translate_sql(str_remove(var, "a"), 
              con = simulate_postgres())
translate_sql(str_remove_all(var, "a"), 
              con = simulate_postgres())
translate_sql(str_like(var, "a"), 
              con = simulate_postgres())
translate_sql(str_starts(var, "a"),
              con = simulate_postgres())
translate_sql(str_ends(var, "a"),
              con = simulate_postgres())
```

### Snowflake
```{r, message=FALSE, warning=FALSE, error=TRUE}
translate_sql(nchar(var), 
              con = simulate_snowflake())
translate_sql(nzchar(var), 
              con = simulate_snowflake())
translate_sql(substr(var, 1, 2), 
              con = simulate_snowflake())
translate_sql(trimws(var), 
              con = simulate_snowflake())
translate_sql(tolower(var), 
              con = simulate_snowflake())
translate_sql(str_to_lower(var), 
              con = simulate_snowflake())
translate_sql(toupper(var), 
              con = simulate_snowflake())
translate_sql(str_to_upper(var), 
              con = simulate_snowflake())
translate_sql(str_to_title(var), 
              con = simulate_snowflake())
translate_sql(str_trim(var), 
              con = simulate_snowflake())
translate_sql(str_squish(var), 
              con = simulate_snowflake())
translate_sql(str_detect(var, "b"),
              con = simulate_snowflake())
translate_sql(str_detect(var, "b", negate = TRUE),
              con = simulate_snowflake())
translate_sql(str_detect(var, "[aeiou]"),
              con = simulate_snowflake())
translate_sql(str_replace(var, "a", "b"), 
              con = simulate_snowflake())
translate_sql(str_replace_all(var, "a", "b"), 
              con = simulate_snowflake())
translate_sql(str_remove(var, "a"), 
              con = simulate_snowflake())
translate_sql(str_remove_all(var, "a"), 
              con = simulate_snowflake())
translate_sql(str_like(var, "a"), 
              con = simulate_snowflake())
translate_sql(str_starts(var, "a"),
              con = simulate_snowflake())
translate_sql(str_ends(var, "a"),
              con = simulate_snowflake())
```

### Spark
```{r, message=FALSE, warning=FALSE, error=TRUE}
translate_sql(nchar(var), 
              con = simulate_spark_sql())
translate_sql(nzchar(var), 
              con = simulate_spark_sql())
translate_sql(substr(var, 1, 2), 
              con = simulate_spark_sql())
translate_sql(trimws(var), 
              con = simulate_spark_sql())
translate_sql(tolower(var), 
              con = simulate_spark_sql())
translate_sql(str_to_lower(var), 
              con = simulate_spark_sql())
translate_sql(toupper(var), 
              con = simulate_spark_sql())
translate_sql(str_to_upper(var), 
              con = simulate_spark_sql())
translate_sql(str_to_title(var), 
              con = simulate_spark_sql())
translate_sql(str_trim(var), 
              con = simulate_spark_sql())
translate_sql(str_squish(var),
              con = simulate_spark_sql())
translate_sql(str_detect(var, "b"),
              con = simulate_spark_sql())
translate_sql(str_detect(var, "b", negate = TRUE),
              con = simulate_spark_sql())
translate_sql(str_detect(var, "[aeiou]"),
              con = simulate_spark_sql())
translate_sql(str_replace(var, "a", "b"),
              con = simulate_spark_sql())
translate_sql(str_replace_all(var, "a", "b"),
              con = simulate_spark_sql())
translate_sql(str_remove(var, "a"),
              con = simulate_spark_sql())
translate_sql(str_remove_all(var, "a"),
              con = simulate_spark_sql())
translate_sql(str_like(var, "a"), 
              con = simulate_spark_sql())
translate_sql(str_starts(var, "a"),
              con = simulate_spark_sql())
translate_sql(str_ends(var, "a"),
              con = simulate_spark_sql())
```

### SQL Server
```{r, message=FALSE, warning=FALSE, error=TRUE}
translate_sql(nchar(var), 
              con = simulate_mssql())
translate_sql(nzchar(var), 
              con = simulate_mssql())
translate_sql(substr(var, 1, 2), 
              con = simulate_mssql())
translate_sql(trimws(var), 
              con = simulate_mssql())
translate_sql(tolower(var), 
              con = simulate_mssql())
translate_sql(str_to_lower(var), 
              con = simulate_mssql())
translate_sql(toupper(var), 
              con = simulate_mssql())
translate_sql(str_to_upper(var), 
              con = simulate_mssql())
translate_sql(str_to_title(var),
              con = simulate_mssql())
translate_sql(str_trim(var), 
              con = simulate_mssql())
translate_sql(str_squish(var),
              con = simulate_mssql())
translate_sql(str_detect(var, "b"),
              con = simulate_mssql())
translate_sql(str_detect(var, "b", negate = TRUE),
              con = simulate_mssql())
translate_sql(str_detect(var, "[aeiou]"),
              con = simulate_mssql())
translate_sql(str_replace(var, "a", "b"),
              con = simulate_mssql())
translate_sql(str_replace_all(var, "a", "b"),
              con = simulate_mssql())
translate_sql(str_remove(var, "a"),
              con = simulate_mssql())
translate_sql(str_remove_all(var, "a"),
              con = simulate_mssql())
translate_sql(str_like(var, "a"), 
              con = simulate_mssql())
translate_sql(str_starts(var, "a"),
              con = simulate_mssql())
translate_sql(str_ends(var, "a"),
              con = simulate_mssql())
```


:::
:::


## Working with dates

Like with strings, support for working with dates is somewhat mixed. In general, we would use functions from the clock package such as get_day(), get_month(), get_year() to extact parts from a date, add_days() to add or subtract days to a date, and date_count_between() to get the number of days between two date variables. 

::: {.callout-tip collapse="true"}
### Show SQL
::: {.panel-tabset collapse="true"}

### duckdb
```{r, message=FALSE, warning=FALSE, error=TRUE}
library(lubridate)
library(clock)

translate_sql(get_day(date_1), 
              con = simulate_duckdb())
translate_sql(get_month(date_1), 
              con = simulate_duckdb())
translate_sql(get_year(date_1), 
              con = simulate_duckdb())
translate_sql(add_days(date_1, 1), 
              con = simulate_duckdb())
translate_sql(add_years(date_1, 1), 
              con = simulate_duckdb())
translate_sql(difftime(date_1, date_2), 
              con = simulate_duckdb())
translate_sql(date_count_between(date_1, date_2, "day"), 
              con = simulate_duckdb())
translate_sql(date_count_between(date_1, date_2, "year"), 
              con = simulate_duckdb())
```

### Redshift
```{r, message=FALSE, warning=FALSE, error=TRUE}
translate_sql(get_day(date_1), 
              con = simulate_redshift())
translate_sql(get_month(date_1), 
              con = simulate_redshift())
translate_sql(get_year(date_1), 
              con = simulate_redshift())
translate_sql(add_days(date_1, 1), 
              con = simulate_redshift())
translate_sql(add_years(date_1, 1), 
              con = simulate_redshift())
translate_sql(difftime(date_1, date_2), 
              con = simulate_redshift())
translate_sql(date_count_between(date_1, date_2, "day"), 
              con = simulate_redshift())
translate_sql(date_count_between(date_1, date_2, "year"), 
              con = simulate_redshift())
```

### Postgres
```{r, message=FALSE, warning=FALSE, error=TRUE}
translate_sql(get_day(date_1), 
              con = simulate_postgres())
translate_sql(get_month(date_1), 
              con = simulate_postgres())
translate_sql(get_year(date_1), 
              con = simulate_postgres())
translate_sql(add_days(date_1, 1), 
              con = simulate_postgres())
translate_sql(add_years(date_1, 1), 
              con = simulate_postgres())
translate_sql(difftime(date_1, date_2), 
              con = simulate_postgres())
translate_sql(date_count_between(date_1, date_2, "day"), 
              con = simulate_postgres())
translate_sql(date_count_between(date_1, date_2, "year"), 
              con = simulate_postgres())
```

### Snowflake
```{r, message=FALSE, warning=FALSE, error=TRUE}
translate_sql(get_day(date_1), 
              con = simulate_snowflake())
translate_sql(get_month(date_1), 
              con = simulate_snowflake())
translate_sql(get_year(date_1), 
              con = simulate_snowflake())
translate_sql(add_days(date_1, 1), 
              con = simulate_snowflake())
translate_sql(add_years(date_1, 1), 
              con = simulate_snowflake())
translate_sql(difftime(date_1, date_2), 
              con = simulate_snowflake())
translate_sql(date_count_between(date_1, date_2, "day"), 
              con = simulate_snowflake())
translate_sql(date_count_between(date_1, date_2, "year"), 
              con = simulate_snowflake())
```

### Spark
```{r, message=FALSE, warning=FALSE, error=TRUE}
translate_sql(get_day(date_1), 
              con = simulate_spark_sql())
translate_sql(get_month(date_1), 
              con = simulate_spark_sql())
translate_sql(get_year(date_1), 
              con = simulate_spark_sql())
translate_sql(add_days(date_1, 1), 
              con = simulate_spark_sql())
translate_sql(add_years(date_1, 1), 
              con = simulate_spark_sql())
translate_sql(difftime(date_1, date_2), 
              con = simulate_spark_sql())
translate_sql(date_count_between(date_1, date_2, "day"), 
              con = simulate_spark_sql())
translate_sql(date_count_between(date_1, date_2, "year"), 
              con = simulate_spark_sql())
```

### SQL Server
```{r, message=FALSE, warning=FALSE, error=TRUE}
translate_sql(get_day(date_1), 
              con = simulate_mssql())
translate_sql(get_month(date_1), 
              con = simulate_mssql())
translate_sql(get_year(date_1), 
              con = simulate_mssql())
translate_sql(add_days(date_1, 1), 
              con = simulate_mssql())
translate_sql(add_years(date_1, 1), 
              con = simulate_mssql())
translate_sql(difftime(date_1, date_2), 
              con = simulate_mssql())
translate_sql(date_count_between(date_1, date_2, "day"), 
              con = simulate_mssql())
translate_sql(date_count_between(date_1, date_2, "year"), 
              con = simulate_mssql())
```


:::
:::

## Data aggregation

We can get the following data aggregations for each of the backends: n(), n_distinct(), sum(), min(), max(), mean(), and sd().


::: {.callout-tip collapse="true"}
### Show SQL
::: {.panel-tabset collapse="true"}

### duckdb
```{r, message=FALSE, warning=FALSE, error=TRUE}
lazy_frame(x = c(1,2), con = simulate_duckdb()) %>% 
  summarise(
          n = n(),
          n_unique = n_distinct(x),
          sum = sum(x, na.rm = TRUE),
          sum_is_1 = sum(x == 1, na.rm = TRUE),
          min = min(x, na.rm = TRUE),
          mean = mean(x, na.rm = TRUE),
          max = max(x, na.rm = TRUE),
          sd = sd(x, na.rm = TRUE)) |> 
  show_query()

```

### postgres
```{r, message=FALSE, warning=FALSE, error=TRUE}
lazy_frame(x = c(1,2), con = simulate_postgres()) %>% 
  summarise(
          n = n(),
          n_unique = n_distinct(x),
          sum = sum(x, na.rm = TRUE),
          sum_is_1 = sum(x == 1, na.rm = TRUE),
          min = min(x, na.rm = TRUE),
          mean = mean(x, na.rm = TRUE),
          max = max(x, na.rm = TRUE),
          sd = sd(x, na.rm = TRUE)) |> 
  show_query()

```

### redshift
```{r, message=FALSE, warning=FALSE, error=TRUE}
lazy_frame(x = c(1,2), con = simulate_redshift()) %>% 
  summarise(
          n = n(),
          n_unique = n_distinct(x),
          sum = sum(x, na.rm = TRUE),
          sum_is_1 = sum(x == 1, na.rm = TRUE),
          min = min(x, na.rm = TRUE),
          mean = mean(x, na.rm = TRUE),
          max = max(x, na.rm = TRUE),
          sd = sd(x, na.rm = TRUE)) |> 
  show_query()

```

### Snowflake
```{r, message=FALSE, warning=FALSE, error=TRUE}
lazy_frame(x = c(1,2), con = simulate_snowflake()) %>% 
  summarise(
          n = n(),
          n_unique = n_distinct(x),
          sum = sum(x, na.rm = TRUE),
          sum_is_1 = sum(x == 1, na.rm = TRUE),
          min = min(x, na.rm = TRUE),
          mean = mean(x, na.rm = TRUE),
          max = max(x, na.rm = TRUE),
          sd = sd(x, na.rm = TRUE)) |> 
  show_query()

```

### Spark
```{r, message=FALSE, warning=FALSE, error=TRUE}
lazy_frame(x = c(1,2), con = simulate_spark_sql()) %>% 
  summarise(
          n = n(),
          n_unique = n_distinct(x),
          sum = sum(x, na.rm = TRUE),
          sum_is_1 = sum(x == 1, na.rm = TRUE),
          min = min(x, na.rm = TRUE),
          mean = mean(x, na.rm = TRUE),
          max = max(x, na.rm = TRUE),
          sd = sd(x, na.rm = TRUE)) |> 
  show_query()
```

### SQL Server
```{r, message=FALSE, warning=FALSE, error=TRUE}
lazy_frame(x = c(1,2), a = "a", con = simulate_mssql()) %>% 
  summarise(
          n = n(),
          n_unique = n_distinct(x),
          sum = sum(x, na.rm = TRUE),
          sum_is_1 = sum(x == 1, na.rm = TRUE),
          min = min(x, na.rm = TRUE),
          mean = mean(x, na.rm = TRUE),
          max = max(x, na.rm = TRUE),
          sd = sd(x, na.rm = TRUE)) |> 
  show_query()

```


:::
:::



## Window
::: {.callout-tip collapse="true"}
### Show SQL
::: {.panel-tabset collapse="true"}

### duckdb
```{r, message=FALSE, warning=FALSE, error=TRUE}
lazy_frame(x = c(1,2), con = simulate_duckdb()) %>% 
  mutate(sum_x = sum(x), 
         n = n(), 
         min_x = min(x), 
         mean_x = mean(x), 
         max_x = max(x)) |> 
  show_query()

lazy_frame(x = c(1,2), con = simulate_duckdb()) %>% 
  mutate(lag_x = lag(x), 
         lead_x = lead(x), 
         dense_rank = dense_rank(x), 
         rank = rank(x)) |> 
  show_query()

```

### postgres
```{r, message=FALSE, warning=FALSE, error=TRUE}
lazy_frame(x = c(1,2), con = simulate_postgres()) %>% 
  mutate(sum_x = sum(x), 
         n = n(), 
         min_x = min(x), 
         mean_x = mean(x), 
         max_x = max(x)) |> 
  show_query()

lazy_frame(x = c(1,2), con = simulate_postgres()) %>% 
  mutate(lag_x = lag(x), 
         lead_x = lead(x), 
         dense_rank = dense_rank(x), 
         rank = rank(x)) |> 
  show_query()

```

### redshift
```{r, message=FALSE, warning=FALSE, error=TRUE}
lazy_frame(x = c(1,2), con = simulate_redshift()) %>% 
  mutate(sum_x = sum(x), 
         n = n(), 
         min_x = min(x), 
         mean_x = mean(x), 
         max_x = max(x)) |> 
  show_query()

lazy_frame(x = c(1,2), con = simulate_redshift()) %>% 
  mutate(lag_x = lag(x), 
         lead_x = lead(x), 
         dense_rank = dense_rank(x), 
         rank = rank(x)) |> 
  show_query()
```

### Snowflake
```{r, message=FALSE, warning=FALSE, error=TRUE}
lazy_frame(x = c(1,2), con = simulate_snowflake()) %>% 
  mutate(sum_x = sum(x), 
         n = n(), 
         min_x = min(x), 
         mean_x = mean(x), 
         max_x = max(x)) |> 
  show_query()

lazy_frame(x = c(1,2), con = simulate_snowflake()) %>% 
  mutate(lag_x = lag(x), 
         lead_x = lead(x), 
         dense_rank = dense_rank(x), 
         rank = rank(x)) |> 
  show_query()

```

### Spark
```{r, message=FALSE, warning=FALSE, error=TRUE}
lazy_frame(x = c(1,2), con = simulate_spark_sql()) %>% 
  mutate(sum_x = sum(x), 
         n = n(), 
         min_x = min(x), 
         mean_x = mean(x), 
         max_x = max(x)) |> 
  show_query()

lazy_frame(x = c(1,2), con = simulate_spark_sql()) %>% 
  mutate(lag_x = lag(x), 
         lead_x = lead(x), 
         dense_rank = dense_rank(x), 
         rank = rank(x)) |> 
  show_query()


```

### SQL Server
```{r, message=FALSE, warning=FALSE, error=TRUE}
lazy_frame(x = c(1,2), con = simulate_mssql()) %>% 
  mutate(sum_x = sum(x), 
         n = n(), 
         min_x = min(x), 
         mean_x = mean(x), 
         max_x = max(x)) |> 
  show_query()

lazy_frame(x = c(1,2), con = simulate_mssql()) %>% 
  mutate(lag_x = lag(x), 
         lead_x = lead(x), 
         dense_rank = dense_rank(x), 
         rank = rank(x)) |> 
  show_query()

```

:::
:::


## Quantiles
Although the above approach to summarising data works well, once we are interested in summarisng distibutions of the data and estimating quantiles things become more complicated. This is because these calculations work differently for different databases.

For example, let's take estimating the median as an example. While some databases treat it as an aggregation similar to how min, mean, and max were calculated above. However, others treat it as a window function. Unfortunately this means that for some databases quantiles can only be calculated using the summarise approach, while in others only the mutate approach can be used.


::: {.callout-tip collapse="true"}
### Show SQL
::: {.panel-tabset collapse="true"}

### duckdb
```{r, message=FALSE, warning=FALSE, error=TRUE}
lazy_frame(x = c(1,2), con = simulate_duckdb()) %>% 
  summarise(
          q25 = quantile(x, 0.25, na.rm = TRUE),
          median = median(x, na.rm = TRUE),
          q75 = quantile(x, 0.75, na.rm = TRUE)) |> 
  show_query()

lazy_frame(x = c(1,2), con = simulate_duckdb()) %>% 
  mutate(
          q25 = quantile(x, 0.25, na.rm = TRUE),
          median = median(x, na.rm = TRUE),
          q75 = quantile(x, 0.75, na.rm = TRUE)) |> 
  show_query()

```

### postgres
```{r, message=FALSE, warning=FALSE, error=TRUE}
lazy_frame(x = c(1,2), con = simulate_postgres()) %>% 
  summarise(
          q25 = quantile(x, 0.25, na.rm = TRUE),
          median = median(x, na.rm = TRUE),
          q75 = quantile(x, 0.75, na.rm = TRUE)) |> 
  show_query()

lazy_frame(x = c(1,2), con = simulate_postgres()) %>% 
  mutate(
          q25 = quantile(x, 0.25, na.rm = TRUE),
          median = median(x, na.rm = TRUE),
          q75 = quantile(x, 0.75, na.rm = TRUE)) |> 
  show_query()

```

### redshift
```{r, message=FALSE, warning=FALSE, error=TRUE}
lazy_frame(x = c(1,2), con = simulate_redshift()) %>% 
  summarise(
          q25 = quantile(x, 0.25, na.rm = TRUE),
          median = median(x, na.rm = TRUE),
          q75 = quantile(x, 0.75, na.rm = TRUE)) |> 
  show_query()

lazy_frame(x = c(1,2), con = simulate_redshift()) %>% 
  mutate(
          q25 = quantile(x, 0.25, na.rm = TRUE),
          median = median(x, na.rm = TRUE),
          q75 = quantile(x, 0.75, na.rm = TRUE)) |> 
  show_query()
```

### Snowflake
```{r, message=FALSE, warning=FALSE, error=TRUE}
lazy_frame(x = c(1,2), con = simulate_snowflake()) %>% 
  summarise(
          q25 = quantile(x, 0.25, na.rm = TRUE),
          median = median(x, na.rm = TRUE),
          q75 = quantile(x, 0.75, na.rm = TRUE)) |> 
  show_query()

lazy_frame(x = c(1,2), con = simulate_snowflake()) %>% 
  mutate(
          q25 = quantile(x, 0.25, na.rm = TRUE),
          median = median(x, na.rm = TRUE),
          q75 = quantile(x, 0.75, na.rm = TRUE)) |> 
  show_query()

```

### Spark
```{r, message=FALSE, warning=FALSE, error=TRUE}
lazy_frame(x = c(1,2), con = simulate_spark_sql()) %>% 
  summarise(
          q25 = quantile(x, 0.25, na.rm = TRUE),
          median = median(x, na.rm = TRUE),
          q75 = quantile(x, 0.75, na.rm = TRUE)) |> 
  show_query()

lazy_frame(x = c(1,2), con = simulate_spark_sql()) %>% 
  mutate(
          q25 = quantile(x, 0.25, na.rm = TRUE),
          median = median(x, na.rm = TRUE),
          q75 = quantile(x, 0.75, na.rm = TRUE)) |> 
  show_query()


```

### SQL Server
```{r, message=FALSE, warning=FALSE, error=TRUE}
lazy_frame(x = c(1,2), con = simulate_mssql()) %>% 
  summarise(
          q25 = quantile(x, 0.25, na.rm = TRUE),
          median = median(x, na.rm = TRUE),
          q75 = quantile(x, 0.75, na.rm = TRUE)) |> 
  show_query()

lazy_frame(x = c(1,2), con = simulate_mssql()) %>% 
  mutate(
          q25 = quantile(x, 0.25, na.rm = TRUE),
          median = median(x, na.rm = TRUE),
          q75 = quantile(x, 0.75, na.rm = TRUE)) |> 
  show_query()

```

:::
:::

