# Creating a reference to the common data model

## Connecting to a database from R using DBI

Database connections from R can be made using the [DBI package](https://dbi.r-dbi.org/). The back-end for `DBI` is facilitated by database specific driver packages. As an example, lets say we want to work with a local duckdb from R. In this case the we can use the duckdb R package as the driver.

```{r}
library(DBI)
db<-dbConnect(duckdb::duckdb(), dbdir=":memory:")
```

If we instead wanted to connect to other database management systems, these connections would be supported by the associated back-end packages and could look something like:

```{r, eval=FALSE}
# Postgres
db <- DBI::dbConnect(RPostgres::Postgres(),
                      dbname = Sys.getenv("CDM5_POSTGRESQL_DBNAME"),
                      host = Sys.getenv("CDM5_POSTGRESQL_HOST"),
                      user = Sys.getenv("CDM5_POSTGRESQL_USER"),
                      password = Sys.getenv("CDM5_POSTGRESQL_PASSWORD"))
# Redshift (almost identical to Postgres)
db <- DBI::dbConnect(RPostgres::Redshift(),
                      dbname   = Sys.getenv("CDM5_REDSHIFT_DBNAME"),
                      host     = Sys.getenv("CDM5_REDSHIFT_HOST"),
                      port     = Sys.getenv("CDM5_REDSHIFT_PORT"),
                      user     = Sys.getenv("CDM5_REDSHIFT_USER"),
                      password = Sys.getenv("CDM5_REDSHIFT_PASSWORD"))
# SQL Server
db <- DBI::dbConnect(odbc::odbc(),
                      Driver   = "ODBC Driver 18 for SQL Server",
                      Server   = Sys.getenv("CDM5_SQL_SERVER_SERVER"),
                      Database = Sys.getenv("CDM5_SQL_SERVER_CDM_DATABASE"),
                      UID      = Sys.getenv("CDM5_SQL_SERVER_USER"),
                      PWD      = Sys.getenv("CDM5_SQL_SERVER_PASSWORD"),
                      TrustServerCertificate="yes",
                      Port     = 1433)
```

## Creating a reference to the OMOP common data model

If we have connected to a database which contains data mapped to the format of the OMOP common data model the `CDMConnector` provides functionality to simplify our work with a database. Because we already know the structure of the common data model, `CDMConnector` can be used to create a reference to the various tables that are used.

```{r, echo = TRUE}
library(CDMConnector)
```

In this case we'll use the Eunomia example data contained in a duckdb database.

```{r, echo = TRUE}
db <- DBI::dbConnect(duckdb::duckdb(), 
                     dbdir = CDMConnector::eunomia_dir())
cdm <- CDMConnector::cdm_from_con(db, 
                                  cdm_schema = "main")
cdm
```

Once we have created the our reference, we can read the tables with "\$" operator or \[\[""\]\].

```{r, echo = TRUE}
cdm$observation_period
cdm[["observation_period"]]
```

When we create our reference we could have also specified the tables we want to read:

```{r, echo = TRUE}
cdm <- CDMConnector::cdm_from_con(db, 
                                  cdm_tables = c("person","observation_period"))
cdm
```

Moreover, we can also specify the writable schema and the tables that we are interested in it when creating our reference. For example, if we wanted to create a reference to the person and observation period tables in the common data model along with cohort tables in a schema we have write access to, we could do this like so:

```{r, echo = TRUE, eval = FALSE}
cdm <- CDMConnector::cdm_from_con(db,
  cdm_schema = "main",
  cdm_tables = c("person","observation_period"),
  write_schema = "results",
  cohort_tables = c("exposure_cohort", "outcome_cohort"))
```
