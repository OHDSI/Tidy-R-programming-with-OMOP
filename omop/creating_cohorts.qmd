# Adding cohorts to the CDM {#sec-creating_cohorts}

## What is a cohort?

When performing research with the OMOP CDM we often want to identify groups of individuals who share some set of characteristics. The criteria for including individuals can range from the seemingly simple (e.g. people diagnosed with asthma) to the much more complicated (e.g. adults diagnosed with asthma who had a year of prior observation time in the database prior to their diagnosis, had no prior history of chronic obstructive pulmonary disease, and no history of use of short-acting beta-antagonists).

The set of people we identify are cohorts, and the OMOP CDM has a specific structure by which they can be represented, with a cohort table having four required fields:

1)  *Cohort definition id* a unique identifier for each cohort (multiple cohorts can be defined in the same cohort table)

2)  *Subject id* a foreign key to the subject in the cohort - typically referring to records in the person table

3)  *Cohort start date* date that indicates the start date of the record.

4)  *Cohort end date* date that indicates the end date of the record.

Individuals must be defined in the person table and have an ongoing record in the observation period table to be part of a cohort. Individuals can enter a cohort multiple times, but the time periods in which they are in the cohort cannot overlap.

It is beyond the scope of this book to describe all the different ways cohorts could be created, however in this chapter we provide a summary of some of the key building blocks for cohort creation. Cohort-building pipelines can be created following these principles to create a wide range of study cohorts.

## Set up

We'll use our the same COVID-19 synthetic dataset that we used before for demonstrating how cohorts can be constructed.

```{r, warning=FALSE, message=FALSE}
library(omock)
library(CohortConstructor)
library(CohortCharacteristics)
library(dplyr)
        
cdm <- mockCdmFromDataset(datasetName = "synthea-covid19-10k", source = "duckdb")
```

## General concept based cohort

Often study cohorts will be based around a specific clinical event identified by some set of clinical codes. Here, for example, we use the [`CohortConstructor`](https://ohdsi.github.io/CohortConstructor/) package to create a cohort of people with Covid-19. For this we are identifying any clinical records with the code [37311061](https://athena.ohdsi.org/search-terms/terms/37311061).

```{r, warning=FALSE, message=FALSE}
cdm$covid <- conceptCohort(cdm = cdm, 
                           conceptSet = list("covid" = 37311061), 
                           name = "covid")
cdm$covid
```

::: {.callout-note collapse="true"}
### Name consistency

Note that the `name` argument determines the name of the permanent table written in the database and as we have seen before we have have to be consistent assigning the tables to the cdm object, that's my we used `name = "covid"` and then we were able to assign it to `cdm$covid`. Otherwise see this failing example:

```{r, error = TRUE}
cdm$not_covid <- conceptCohort(cdm = cdm, 
                               conceptSet = list("covid" = 37311061), 
                               name = "covid")
```
:::

::: {.callout-tip collapse="true"}
### Finding appropriate codes

In the defining the cohorts above we have needed to provide concept IDs to define our cohort. But, where do these come from?

We can search for codes of interest using the [`CodelistGenerator`](https://darwin-eu.github.io/CodelistGenerator/) package. This can be done using a text search with the function [`getCandidateCodes()`](https://darwin-eu.github.io/CodelistGenerator/reference/getCandidateCodes.html). For example, we can have found the code we used above (and many others) like so:

```{r}
library(CodelistGenerator)
getCandidateCodes(cdm = cdm, 
                  keywords = c("coronavirus", "covid"),
                  domains = "condition",
                  includeDescendants = TRUE)
```

We can also do automated searches that make use of the hierarchies in the vocabularies. Here, for example, we find the code for the drug ingredient Acetaminophen and all of it's descendants.

```{r}
getDrugIngredientCodes(cdm = cdm, name = "acetaminophen")
```

Note that in practice clinical expertise is vital in the identification of appropriate codes so as to decide which the codes are in line with the clinical idea at hand.
:::

We can see that as well as having the cohort entries above, our cohort table is associated with several attributes.

First, we can see the settings associated with cohort.

```{r, warning=FALSE, message=FALSE}
settings(cdm$covid) |> 
  glimpse()
```

In settings we can see the cohort name that by default is the name of the codelist used, in this case 'covid' as we used `conceptSet = list(covid = 37311061)`. Also the cdm and vocabulary versions are recorded in the settings by the CohortConstructor package.

Second, we can get counts of each cohort.

```{r, warning=FALSE, message=FALSE}
cohortCount(cdm$covid) |> 
  glimpse()
```

Where you can see the number of records and number of subjects for each cohort, in this case there are no multiple records per subject.

An attrition can also be retrieved from any cohort.

```{r, warning=FALSE, message=FALSE}
attrition(cdm$covid) |> 
  glimpse()
```

And finally, you can extract the codelists used to create a cohort table:

```{r}
codelist <- cohortCodelist(cdm$covid, cohortId = 1)
codelist
codelist$covid
```

Note in this case we had to provide the cohortId of the cohort of interest.

All these attributes can be retrieved because it is a `cohort_table` object, a class on top of the usual `cdm_table` class that we have seen before:

```{r}
class(cdm$covid)
```

As we will see below these attributes of the cohorts become particularly useful as we apply further restrictions on our cohort.

::: {.callout-tip collapse="true"}
### Behind the scenes

All these attributes that we have seen are part of the attributes of the cohort_table object and are used by these utility functions:

```{r}
names(attributes(cdm$covid))
```

In particular the `cohort_set` (contains the [`settings()`](https://darwin-eu.github.io/omopgenerics/reference/settings.html) source), `cohort_attrition` (contains the source for [`cohortCount()`](https://darwin-eu.github.io/omopgenerics/reference/cohortCount.html) and [`attrition()`](https://darwin-eu.github.io/omopgenerics/reference/attrition.html)) and `cohort_codelist` (contains the source for [`cohortCodelist()`](https://darwin-eu.github.io/omopgenerics/reference/cohortCodelist.html)) attributes are the ones of interest. For database back-ends these attributes are stored in the database so when we read them again the attributes persist. See that even apparently we only have one table 'cdm\$covid' in fact four tables were written in the database:

```{r}
library(omopgenerics) # TODO https://github.com/OHDSI/omock/issues/189 
listSourceTables(cdm = cdm)
```

We do not have to worry about the attributes and the naming of the tables as `CohortConstructor`, `CDMConnector` and `omopgenerics` take care of that and if we create the cohorts with functions such as `conceptCohort()` then we will be able to read them back with the `cohortTables` argument of `cdmFromCon()` or the `readSourceTable()` function and all the attributes will be in place.
:::

## Applying inclusion criteria

### Only include first cohort entry per person

Let's say we first want to restrict to first entry.

```{r, warning=FALSE, message=FALSE}
cdm$covid <- cdm$covid |> 
     requireIsFirstEntry() 
```

### Restrict to study period

Then we are interested in records only after January 1st 2020.

```{r, warning=FALSE, message=FALSE}
cdm$covid <- cdm$covid |>
   requireInDateRange(dateRange = c(as.Date("2020-09-01"), NA))
```

### Applying demographic inclusion criteria

Finally we want to restrict our population of interest to only adult males under 65 years old. We can do that with the `requireDemographics()` function.

```{r, warning=FALSE, message=FALSE}
cdm$covid <- cdm$covid |>
   requireDemographics(ageRange = c(18, 64), sex = "Male")
```

::: {.callout-note collapse="true"}
### Similarity of naming with PatientProfiles

Note that all these `require*()` functions that come from the CohortConstructor package use functionalities from PatientProfiles and the naming is consistent, for example `requireDemographics()` uses `addDemographics()`, `requirePriorObservation()` uses `addPriorObservation()` and so...
:::

### Applying cohort-based inclusion criteria

As well as requirements about specific demographics, we may also want to use another cohort for inclusion criteria. Let's say we want to exclude anyone with a history of cardiac conditions before their Covid-19 cohort entry.

We can first generate this new cohort table with records of cardiac conditions.

```{r, warning=FALSE, message=FALSE}
cdm$cardiac <- conceptCohort(
  cdm = cdm,
  conceptSet = list("myocaridal_infarction" = c(317576L, 313217L, 321042L, 4329847L)), 
  name = "cardiac"
)
cdm$cardiac
```

And now we can apply the inclusion criteria that individuals have zero intersections with the table in the time prior to their Covid-19 cohort entry.

```{r, warning=FALSE, message=FALSE}
cdm$covid <- cdm$covid |> 
  requireCohortIntersect(targetCohortTable = "cardiac", 
                         indexDate = "cohort_start_date", 
                         window = c(-Inf, -1), 
                         intersections = 0) 
```

Note if we had wanted to have required that individuals did have a history of a cardiac condition we would instead have set `intersections = c(1, Inf)` above.

::: {.callout-note collapse="true"}
### Use requireConceptIntersect

We could have applied the exact same inclusion criteria using the `requireConceptIntersect()` function, this code would be equivalent:

```{r, eval=FALSE}
cdm$covid <- cdm$covid |> 
  requireConceptIntersect(
    conceptSet = list("myocaridal_infarction" = c(317576L, 313217L, 321042L, 4329847L)),
    indexDate = "cohort_start_date", 
    window = c(-Inf, -1), 
    intersections = 0
  )
```

In fact this approach would be more efficient unless we want to re-use the `myocardial_infarction` cohort for another inclusion criteria or analysis. Note that the intersection with the cohort table is more flexible as it can have more complicated inclusion/exclusion criteria, but you have to be more careful with the order of inclusion criteria (e.g. if we would restrict the myocaridal_infarction cohort to a certain time span when we would do the intersect we would require to not have the inclusion criteria on that time span).
:::

## Cohort attributes

Using the `require*()` functions th cohort attribytes have been updated to reflect the applied inclusion criteria.

```{r, warning=FALSE, message=FALSE}
settings(cdm$covid) |> 
  glimpse()
```

```{r, warning=FALSE, message=FALSE}
cohortCount(cdm$covid) |> 
  glimpse()
```

```{r, warning=FALSE, message=FALSE}
attrition(cdm$covid) |> 
  glimpse()
```

We can visualise the attrition with the CohortCharacteristics package, we can first extract it with `summariseCohortAttrition()` and then `plotCohortAttrition` to better view the impact of applying each inclusion criteria:

```{r, warning=FALSE, message=FALSE}
attrition_summary <- summariseCohortAttrition(cohort = cdm$covid)
plotCohortAttrition(result = attrition_summary, type = 'png')
```

Note that `conceptCohort()` first step lead to several rows in the attrition table, whereas any other `require*()` function always add just one record of attrition.

::: {.callout-tip collapse="true"}
### Cohort naming utilities

As we have seen that by default the naming of the cohorts in the name of the codelist:

```{r}
cdm$my_cohort <- conceptCohort(cdm = cdm, 
                               conceptSet = list("concept_1" = 37311061L, "concept_2" = 317576L), 
                               name = "my_cohort")
settings(cdm$my_cohort)
```

But maybe we are interested to rename a cohort (e.g. after applying the inclusion criteria), we can do that with the `renameCohort()` utility function:

```{r}
cdm$my_cohort <- cdm$my_cohort |>
  requirePriorObservation(minPriorObservation = 365, cohortId = 1) |>
  renameCohort(cohortId = 1, newCohortName = "concept_1_365obs")
settings(cdm$my_cohort)
```

Note that for arguments such as `cohortId`, `targetCohortId`, ... we are able to use the name of the cohort of interest, see for example:

```{r}
cdm$my_cohort <- cdm$my_cohort |>
  requireSex(sex = "Female", cohortId = "concept_2") |>
  renameCohort(cohortId = "concept_2", newCohortName = "concept_2_female")
settings(cdm$my_cohort)
```

This functionality also applies to other packages, such as CohortCharacteristics, PatientProfiles, DrugUtilisation, ... Finally in some cases it is useful to add the cohort_name as a column to not have to check manually the equivalence between *cohort definition id* and *cohort name*, this can be done using the PatientProfiles utility function `addCohortName()`:

```{r}
library(PatientProfiles)
cdm$my_cohort |>
  addCohortName() |>
  glimpse()
```

Also other utility functions that can be useful are those provided by omopgenerics:

```{r}
library(omopgenerics)
getCohortId(cohort = cdm$my_cohort, cohortName = "concept_2_female")
getCohortId(cohort = cdm$my_cohort)
getCohortName(cohort = cdm$my_cohort, cohortId = 1)
getCohortName(cohort = cdm$my_cohort, cohortId = c(2, 1))
getCohortName(cohort = cdm$my_cohort)
```
:::

## Disconnecting

Once we have finished our analysis we can close our connection to the database behind our cdm reference.

```{r}
cdmDisconnect(cdm) 
```

## Further reading

-   [Cohort tables](https://darwin-eu.github.io/omopgenerics/articles/cohorts.html)

- Burn E, Català M, Mercade-Besora N, Alcalde-Herraiz M, Du M, Guo Y, Chen X, Lopez-Guell K, Rowlands E (2025). *CohortConstructor: Build and Manipulate Study Cohorts Using a Common Data Model*. R package version 0.5.0, <https://ohdsi.github.io/CohortConstructor/>.
