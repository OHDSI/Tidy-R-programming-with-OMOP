# Creating a CDM reference {#sec-cdm_reference}

## The OMOP CDM layout

The OMOP CDM standardises the structure of healthcare data. Data is stored across a system of tables with established relationships between them. In other words, the OMOP CDM provides a relational database structure, with version 5.4 of the OMOP CDM shown below.

![OMOP CDM v5.4 entity-relationship diagram retrieved from <https://ohdsi.github.io/CommonDataModel/cdm54erd.html>](../images/erd.jpg){#fig-scatter .lightbox}

## Creating a reference to the OMOP CDM

As we saw in @sec-data_model, creating a data model in R to represent the OMOP CDM can provide a basis for analytic pipelines using the data. Luckily for us, we won't have to create functions and methods for this ourselves. Instead, we will use the [`omopgenerics`](darwin-eu.github.io/omopgenerics) package which defines a data model for OMOP CDM data and the [`CDMConnector`](darwin-eu.github.io/CDMConnector) package which provides functions for connecting to a OMOP CDM data held in a database.

To see how this works we will use the [`omock`](ohdsi.github.io/omock) package to create example data in the format of the OMOP CDM, which we will then copy to a DuckDB database created by the [`duckdb`](https://r.duckdb.org) package.

```{r, message=FALSE, warning=FALSE}
library(duckdb)
library(dplyr)
library(omock)
library(CDMConnector)
library(palmerpenguins)

cdm_local <- mockCdmReference() |>
  mockPerson(nPerson = 100) |>
  mockObservationPeriod() |>
  mockConditionOccurrence() |>
  mockDrugExposure() |>
  mockObservation() |>
  mockMeasurement() |>
  mockVisitOccurrence() |>
  mockProcedureOccurrence()

con <- dbConnect(drv = duckdb())
src <- dbSource(con = con, writeSchema = "main")

cdm <- insertCdmTo(cdm = cdm_local, to = src)
```

Note that [`insertCdmTo()`](https://darwin-eu.github.io/omopgenerics/reference/insertCdmTo.html) output is already a `<cdm_reference>` object. But how we would create this cdm reference from the connection? We can use the function [`cdmFromCon()`](https://darwin-eu.github.io/CDMConnector/reference/cdmFromCon.html) from [`CDMConnector`](https://darwin-eu.github.io/CDMConnector/) to create our cdm reference. Note that as well as specifying the schema containing our OMOP CDM tables, we will also specify a write schema where any database tables we create during our analysis will be stored. Often our OMOP CDM tables will be in a schema that we only have read-access to and we'll have another schema where we can have write-access and where intermediate tables can be created for a given study.

```{r, message=FALSE, warning=FALSE, echo = TRUE}
cdm <- cdmFromCon(con = con, 
                  cdmSchema = "main", 
                  writeSchema = "main",
                  cdmName = "example_data")
```

```{r}
cdm
```

::: {.callout-tip collapse="true"}
### Setting a write prefix

We can also specify a write prefix and this will be used whenever permanent tables are created in the write schema. This can be useful when we're sharing our write schema with others and want to avoid table name conflicts and easily drop tables created as part of a particular study.

```{r, message=FALSE, warning=FALSE, echo = TRUE, eval = FALSE}
cdm <- cdmFromCon(con = con,
                  cdmSchema = "main", 
                  writeSchema = "main", 
                  writePrefix = "my_study_",
                  cdmName = "example_data")
```

Note you only have to specify this writePreix once at the connection stage and then the cdm_reference object will store that and use it every time that you create a new table.
:::

We can see that we now have an object that contains references to all the OMOP CDM tables. We can reference specific tables using the "\$" or "\[\[ ... \]\]" operators.

```{r, echo = TRUE}
cdm$person

cdm[["observation_period"]]
```

Note that here we have first created a local version of the cdm with all the tables of interest with [`omock`](ohdsi.github.io/omock/) (`cdm_local`), then copied it to a DuckDB database, and finally crated a reference to it with [`CDMConnector`](darwin-eu.github.io/CDMConnector), so that we can work with the final `cdm` object as we normally would for one created with our own healthcare data. In that case we would directly use [`cdmFromCon()`](darwin-eu.github.io/CDMConnector/reference/cdmFromCon.html) with our own database information. Throughout this chapter, however, we will keep working with the mock dataset.

## CDM attributes

### CDM name

Our cdm reference will be associated with a name. By default this name will be taken from the `cdm_source_name` field from the `cdm_source` table. We will use the function [`cdmName()`](darwin-eu.github.io/omopgenerics/reference/cdmName.html) from [`omopgenerics`](darwin-eu.github.io/omopgenerics/) to get it.

```{r, message=FALSE, warning=FALSE, echo = TRUE}
cdm <- cdmFromCon(con = con,
                  cdmSchema = "main", 
                  writeSchema = "main")
cdm$cdm_source
cdmName(cdm)
```

However, we can instead set this name to whatever else we want when creating our cdm reference.

```{r, message=FALSE, warning=FALSE, echo = TRUE}
cdm <- cdmFromCon(con = con,
                  cdmSchema = "main", 
                  writeSchema = "main", 
                  cdmName = "my_cdm")
cdmName(cdm)
```

Note that we can also get our cdm name from any of the tables in our cdm reference.

```{r, message=FALSE, warning=FALSE, echo = TRUE}
cdmName(cdm$person)
```

::: {.callout-tip collapse="true"}
### Behind the scenes

The class of the cdm reference itself is `<cdm_reference>`.

```{r, message=FALSE, warning=FALSE}
class(cdm)
```

Each of the tables has class `<cdm_table>`. If the table is one of the standard OMOP CDM tables it will also have class `<omop_table>`. This latter class is defined so that we can allow different behaviour for these core tables (person, condition_occurrence, observation_period, etc.) compared to other tables that are added to the cdm reference during the course of running a study.

```{r, message=FALSE, warning=FALSE}
class(cdm$person)
```

We can see that `cdmName()` is a generic function, which works for both the cdm reference as a whole and individual tables.

```{r, message=FALSE, warning=FALSE}
library(sloop)
s3_dispatch(cdmName(cdm))
s3_dispatch(cdmName(cdm$person))
```
:::

### CDM version

We can also easily check the OMOP CDM version that is being used with the function [`cdmVersion()`](darwin-eu.github.io/omopgenerics/reference/cdmVersion.html) from [`omopgenerics`](darwin-eu.github.io/omopgenerics) like so:

```{r, echo = TRUE}
cdmVersion(cdm)
```

::: {.callout-note collapse="true"}
### cdmVersion

Note, the `cdmVersion()` function also works for `<cdm_table>` objects:

```{r}
cdmVersion(cdm$person)
```
:::

::: {.callout-note collapse="true"}
### Methods functions

Although as stated the [`cdmName()`](darwin-eu.github.io/omopgenerics/reference/cdmName.html) and [`cdmVersion()`](darwin-eu.github.io/omopgenerics/reference/cdmVersion.html) functions are defined by the omopgenerics packages, these functions are reexported in other packages and you won't need to load omopgenerics explicitly.
:::

## Including cohort tables in the cdm reference

A [cohort](https://doi.org/10.1016/j.chest.2020.03.014) is a fundamental piece in epidemiological studies, later we'll see how to create cohorts in more detail in @sec-creating_cohorts. For the moment, let's just outline how we can include the reference to an existing cohort in our cdm reference. For this we'll use [`omock`](ohdsi.github.io/omock) to add a cohort to our local cdm and upload that to a DuckDB database again.

```{r, echo = TRUE}
cdm_local <- cdm_local |> 
  mockCohort(name = "my_study_cohort")
con <- dbConnect(drv = duckdb())
src <- dbSource(con = con, writeSchema = "main")
cdm <- insertCdmTo(cdm = cdm_local, to = src)
```

Now we can specify we want to include this existing cohort table to our cdm object when creating our cdm reference.

```{r, message=FALSE, warning=FALSE, echo = TRUE}
cdm <- cdmFromCon(con = con, 
                  cdmSchema = "main", 
                  writeSchema = "main",
                  cohortTables = "my_study_cohort",
                  cdmName = "example_data")
cdm
```

```{r}
cdm$my_study_cohort |> 
  glimpse()
```

::: {.callout-note collapse="true"}
### Tables included in the cdm reference

Note that by default the cohort table won't be included in the cdm_reference object.

```{r}
cdm <- cdmFromCon(con = con, 
                  cdmSchema = "main", 
                  writeSchema = "main",
                  cdmName = "example_data")
cdm
```

Even if the cohort exists in the database:

```{r}
dbListTables(conn = con)
```

By default only the default omop tables [`omopTables()`](darwin-eu.github.io/omopgenerics/reference/omopTables.html) will be included (if they exists) into the cdm_reference object.
:::

## Including achilles tables in the cdm reference

If we have the results tables from the [`Achilles`](ohdsi.github.io/Achilles/) package in our database, we can also include these in our cdm reference.

Just to show how this can be done let's upload some empty results tables in the Achilles format.

```{r}
dbWriteTable(conn = con, 
             name = "achilles_analysis",
             value = tibble(
               analysis_id = NA_integer_,
               analysis_name = NA_character_,
               stratum_1_name = NA_character_,
               stratum_2_name = NA_character_,
               stratum_3_name = NA_character_,
               stratum_4_name = NA_character_,
               stratum_5_name = NA_character_,
               is_default = NA_character_,
               category = NA_character_))
dbWriteTable(conn = con, 
             name = "achilles_results",
             value = tibble(
               analysis_id = NA_integer_,
               stratum_1 = NA_character_,
               stratum_2 = NA_character_,
               stratum_3 = NA_character_,
               stratum_4 = NA_character_,
               stratum_5 = NA_character_,
               count_value = NA_character_))
dbWriteTable(conn = con, 
             name = "achilles_results_dist",
             value = tibble(
               analysis_id = NA_integer_,
               stratum_1 = NA_character_,
               stratum_2 = NA_character_,
               stratum_3 = NA_character_,
               stratum_4 = NA_character_,
               stratum_5 = NA_character_,
               count_value = NA_character_,
               min_value = NA_character_,
               max_value = NA_character_,
               avg_value = NA_character_,
               stdev_value = NA_character_,
               median_value = NA_character_,
               p10_value = NA_character_,
               p25_value = NA_character_,
               p75_value = NA_character_,
               p90_value = NA_character_))
```

We can now include these achilles table in our cdm reference as in the previous case.

```{r, message=FALSE, warning=FALSE, echo = TRUE}
cdm <- cdmFromCon(con = con, 
                  cdmSchema = "main", 
                  writeSchema = "main",
                  cohortTables = "my_study_cohort",
                  achillesSchema = "main",
                  cdmName = "example_data")
cdm
```

Note we specified the `achillesSchema` that in this case is the same than the `writeSchema` and `cdmSchema`, but each one of them can be different and point to a separate [schema](https://www.geeksforgeeks.org/dbms/database-schemas/) in our database.

## Adding other tables to the cdm reference

Let's say we have some additional **local** data that we want to add to our cdm reference. We can add this both to the same source (in this case a database) and to our cdm reference using [`insertTable()`](darwin-eu.github.io/omopgenerics/reference/insertTable.html) from [`omopgenerics`](darwin-eu.github.io/omopgenerics/) ([`insertTable()`](darwin-eu.github.io/omopgenerics/reference/insertTable.html) is also re-exported in [`CDMConnector`](darwin-eu.github.io/CDMConnector/)). We will show this with the dataset `cars` in-built in R.

```{r, echo = TRUE}
cars |> 
  glimpse()
```

```{r, echo = TRUE}
cdm <- insertTable(cdm = cdm, name = "cars", table = cars)
```

We can see that now this extra table has been uploaded to the database behind our cdm reference and also added to our reference.

```{r, echo = TRUE}
cdm
```

```{r, echo = TRUE}
cdm$cars
```

If we already had the table in the database we could have instead just assigned it to our existing cdm reference. To see this let's upload the `penguins` table to our DuckDB database.

```{r}
dbWriteTable(conn = con, name = "penguins", value = penguins)
```

Once we have this table in the database, we can just read it using the [`readSourceTable()`](darwin-eu.github.io/omopgenerics/reference/readSourceTable.html) function.

```{r}
cdm <- readSourceTable(cdm = cdm, name = "penguins")

cdm
```

Note that omopgenerics provide these functions [`readSourceTable()`](darwin-eu.github.io/omopgenerics/reference/readSourceTable.html), [`listSourceTables()`](darwin-eu.github.io/omopgenerics/reference/listSourceTables.html), and [`dropSourceTable()`](darwin-eu.github.io/omopgenerics/reference/dropSourceTable.html) for the easier management of the tables in the writeSchema.

```{r}
listSourceTables(cdm = cdm)
dropSourceTable(cdm = cdm, name = "penguins")
listSourceTables(cdm = cdm)
```

::: {.callout-note collapse="true"}
### Difference between `insertTable` and `dbWriteTable`

-   [`dbWriteTable()`](https://dbi.r-dbi.org/reference/dbWriteTable.html) is a function from the `DBI` package that writes a local R data frame to a database. You need to manually specify the schema and table name and it does not update the cdm reference object.

-   [`insertTable()`](darwin-eu.github.io/omopgenerics/reference/insertTable.html) is a function from the [`omopgenerics`](darwin-eu.github.io/omopgenerics) package designed for use with cdm reference objects. It writes a local table to the database and adds it to the list of tables in the cdm reference. Internally, it uses [`dbWriteTable()`](https://dbi.r-dbi.org/reference/dbWriteTable.html) but also handles the schema and table name automatically using the writeSchema and writePrefix from the cdm reference.

In general, for studies using OMOP CDM data, you should use `insertTable()` rather than `dbWriteTable()`. It ensures the table is both written to the correct location in the database and accessible through the cdm reference object. Only use `dbWriteTable()` if you are confident working directly with the database and understand its structure.

Note `insertTable()` would also work for a local cdm reference or any other defined cdm reference source, whereas the `dbWriteTable()` is a database specific function.

TODO reference to omopgenerics supported sources.
:::

## Mutability of the cdm reference

An important characteristic of our cdm reference is that we can alter the tables in R, but the OMOP CDM data will not be affected. We will therefore only be transforming the data in our cdm object but the original datasets behind it will remain intact.

For example, let's say we want to perform a study with only people born in 1970. For this we could filter our person table to only people born in this year.

```{r, echo = TRUE}
cdm$person <- cdm$person |> 
  filter(year_of_birth == 1970)

cdm$person
```

From now on, when we work with our cdm reference this restriction will continue to have been applied.

```{r, echo = TRUE}
cdm$person |> 
  tally()
```

The original OMOP CDM data itself however will remain unaffected. We can see that, indeed, if we create our reference again the underlying data is unchanged.

```{r, message=FALSE, warning=FALSE, echo = TRUE}
cdm <- cdmFromCon(con = con,
                  cdmSchema = "main", 
                  writeSchema = "main", 
                  cdmName = "example_data")
cdm$person |> 
  tally()
```

The mutability of our cdm reference is a useful feature for studies as it means we can easily tweak our OMOP CDM data if needed. Meanwhile, leaving the underlying data unchanged is essential so that other study code can run against the data, unaffected by any of our changes.

One thing we can't do, though, is alter the structure of OMOP CDM tables. For example, the following code would cause an error as the person table must always have the column person_id.

```{r, error=TRUE}
cdm$person <- cdm$person |> 
  rename("new_id" = "person_id")
```

In such a case we would have to call the table something else first, and then run the previous code:

```{r}
cdm$person_new <- cdm$person |> 
  rename("new_id" = "person_id") |> 
  compute(name = "person_new")
```

Now we would be allowed to have this new table as an additional table in our cdm reference, knowing it was not in the format of one of the core OMOP CDM tables.

```{r, echo = TRUE}
cdm
```

The package `omopgenerics` provides a comprehensive list of the required features of a valid cdm reference. You can read more about it [here](https://darwin-eu.github.io/omopgenerics/articles/cdm_reference.html).

::: {.callout-note collapse="true"}
### Name consistency

Note also that there must be a name consistency between the name of the table and the assignment in the cdm_reference object.

```{r, error=TRUE}
cdm$new_table <- cdm$person |> 
  compute(name = "not_new_table")
```
:::

## Working with temporary and permanent tables

When we create new tables and our cdm reference is in a database we have a choice between using temporary or permanent tables. In most cases we can work with these interchangeably. Below we create one temporary table and one permanent table. We can see that both of these tables have been added to our cdm reference and that we can use them in the same way. Note that any new computed table will by default be temporary unless otherwise specified.

```{r, message=FALSE, warning=FALSE}
cdm$person_new_temp <- cdm$person |> 
  head(5) |> 
  compute(temporary = TRUE)
```

```{r, message=FALSE, warning=FALSE}
cdm$person_new_permanent <- cdm$person |> 
  head(5) |> 
  compute(name = "person_new_permanent", temporary = FALSE)
```

```{r, message=FALSE, warning=FALSE}
cdm

cdm$person_new_temp

cdm$person_new_permanent
```

One benefit of working with temporary tables is that they will be automatically dropped at the end of the session, whereas the permanent tables will be left over in the database until explicitly dropped. This helps maintain the original database structure tidy and free of irrelevant data.

However, one disadvantage of using temporary tables is that we will generally accumulate more and more of them as we go (in a single R session), whereas we can overwrite permanent tables continuously. For example, if our study code contains a loop that requires a compute, we would either overwrite an intermediate permanent table 100 times or create 100 different temporary tables in the process. In the latter case we should be wary of consuming a lot of drive memory, which could lead to performance issues or even crashes.

::: {.callout-note collapse="true"}
### `name` argument in `compute()`

Note that in the previous examples we explicitly specified the name of the new table and whether it must be temporary or permanent (temporary = FALSE), but we do not need to populate the temporary field explicitly as if name is left as NULL (default behavior) then the table will be temporary (temporary = TRUE) and if the name argument is populated with a character (e.g name = "my_custom_table") then the created table will be permanent:

```{r}
cdm$person_new_temp <- cdm$person |> 
  compute()

cdm$person_new_permanent <- cdm$person |> 
  compute(name = "person_new_permanent")
```
:::

## Disconnecting

Once we have finished our analysis we can close our connection to the database behind our cdm reference.

```{r}
cdmDisconnect(cdm) 
```

## Further reading

-   Català M, Burn E (2025). *omopgenerics: Methods and Classes for thecOMOP Common Data Model*. R package version 1.3.1, <https://darwin-eu.github.io/omopgenerics/>.
-   Black A, Gorbachev A, Burn E, Català M, Nika I (2025). CDMConnector: Connect to an OMOP Common Data Model. R package version 2.2.0, <https://darwin-eu.github.io/CDMConnector/>.
-   OmopOnPostgres (*in progress*)
-   OmopOnSpark (*in progress*)
-   OmopOnDuckDB (*in progress*)
