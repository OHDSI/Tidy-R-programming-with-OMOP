# Creating a cdm reference {#sec-cdm_reference}

## The OMOP CDM layout

The OMOP CDM standardises the structure of health care data. Data is stored across a system of tables with established relationships between them. In other words, the OMOP CDM provides a relational database structure, with version 5.4 of the OMOP CDM shown below. ![](images/erd.jpg){.lightbox}

## Creating a reference to the OMOP common data model

As we saw in @sec-dbplyr_packages, creating a data model in R to represent the OMOP CDM can provide a basis for analytic pipleines using the data. Luckily for us we won't have to create functions and methods for this ourselves. Instead we will use the `omopgenerics` package which defines a data model for OMOP CDM data and the `CDMConnector` package which provides functions for connecting to a OMOP CDM data held in a database.

To see how this works we will use the `omock` to create example data in the format of the OMOP CDM, which we then copy to a duckdb database.

```{r, message=FALSE, warning=FALSE}
library(DBI)
library(here)
library(dplyr)
library(omock)
library(omopgenerics)
library(CDMConnector)

cdm_local <- omock::mockCdmReference() |>
    omock::mockPerson(nPerson = 100) |>
    omock::mockObservationPeriod() |>
    omock::mockConditionOccurrence() |>
    omock::mockDrugExposure() |>
    omock::mockObservation() |>
    omock::mockMeasurement() |>
    omock::mockVisitOccurrence() |>
    omock::mockProcedureOccurrence()

db <- DBI::dbConnect(duckdb::duckdb())
CDMConnector::copyCdmTo(con = db,
                        cdm = cdm_local,
                        schema ="main", 
                        overwrite = TRUE)
```

Now we have OMOP CDM data in a database we can use `cdmFromCon()` to create our cdm reference. Note that as well as specifying the schema containing our OMOP CDM tables, we will also specify a write schema where any database tables we create during our analysis will be stored (often our OMOP CDM tables will be in a schema that we only have read-access to and we'll have another schema where we can have write-access where intermediate tables can be created for a given a study).

```{r, message=FALSE, warning=FALSE, echo = TRUE}
cdm <- cdmFromCon(db, 
                  cdmSchema = "main", 
                  writeSchema = "main",
                  cdmName = "example_data")
```

```{r}
cdm
```

::: {.callout-tip collapse="true"}
## Setting a write prefix

We can also specify a write prefix and this will be used whenever permanent tables are created in the write schema. This can be useful when we're sharing our write schema with others and want to avoid table name conflicts and easily drop tables created as part of a particular study.

```{r, message=FALSE, warning=FALSE, echo = TRUE, eval = FALSE}
cdm <- cdmFromCon(con = db,
                  cdmSchema = "main", 
                  writeSchema = "main", 
                  writePrefix = "my_study_",
                  cdmName = "example_data")
```
:::

We can see that we now have an object that contains references to all the OMOP CDM tables. We can reference specific tables using the "\$" or "\[\[ ... \]\]" operators.

```{r, echo = TRUE}
cdm$person

cdm[["observation_period"]]
```

## CDM attributes

### CDM name

Our cdm reference will be associated with a name. By default this name will be taken from the cdm source name field from the cdm source table.

```{r, message=FALSE, warning=FALSE, echo = TRUE}
cdm <- cdmFromCon(db,
  cdmSchema = "main", 
  writeSchema = "main")
cdm$cdm_source
cdmName(cdm)
```

However, we can instead set this name when creating our cdm reference.

```{r, message=FALSE, warning=FALSE, echo = TRUE}
cdm <- cdmFromCon(db,
  cdmSchema = "main", 
  writeSchema = "main", 
  cdmName = "my_cdm")
cdmName(cdm)
```

Note, we can also can get our cdm name from any of the tables in our cdm reference.

```{r, message=FALSE, warning=FALSE, echo = TRUE}
cdmName(cdm$person)
```

::: {.callout-tip collapse="true"}
## Behind the scenes

The cdm reference itself has a class of a cdm_reference.

```{r, message=FALSE, warning=FALSE}
class(cdm)
class(cdm$person)
```

Then each of the tables have a class of a cdm_table. If the table is one of the standard OMOP CDM tables it will also have a class of an "omop_table". This latter class is useful when we want to have different behaviour for these core tables compared to other tables that are added to the cdm reference during the course of running a study.

```{r, message=FALSE, warning=FALSE}
class(cdm$person)
```

We can see that cdmName() is a generic function, which works for both the cdm reference as a whole and individual tables.

```{r, message=FALSE, warning=FALSE}
library(sloop)
s3_dispatch(cdmName(cdm))
s3_dispatch(cdmName(cdm$person))
```
:::

### CDM version

We can also easily check the OMOP CDM version that is being used

```{r, echo = TRUE}
cdmVersion(cdm)
```

## Including cohort tables in the cdm reference

We'll be seeing how to create cohorts in more detail in a couple of chapters time. For the moment, let's just see that we can include a cohort in our cdm reference. For this we'll use omock to add a cohort to our local cdm and upload that to a duckdb database again.

```{r, echo = TRUE}
cdm_local <- cdm_local |> 
  omock::mockCohort(name = "my_study_cohort")
db <- DBI::dbConnect(duckdb::duckdb())
CDMConnector::copyCdmTo(con = db,
                        cdm = cdm_local,
                        schema ="main", 
                        overwrite = TRUE)

```

Now we can specify this existing cohort table when creating our cdm reference.

```{r, message=FALSE, warning=FALSE, echo = TRUE}
cdm <- cdmFromCon(db, 
                  cdmSchema = "main", 
                  writeSchema = "main",
                  cohortTables = "my_study_cohort",
                  cdmName = "example_data")
cdm
```

```{r}
cdm$my_study_cohort |> 
  glimpse()
```

## Including achilles tables in the cdm reference

If we have the results tables from the Achilles R package <https://ohdsi.github.io/Achilles/> in our database, we can also include these in our cdm reference.

Just to show how this can be done let's upload some empty results tables in the Achilles format.

```{r}
DBI::dbWriteTable(db, 
                  "achilles_analysis",
                  tibble(
                    analysis_id = NA_integer_,
                    analysis_name = NA_character_,
                    stratum_1_name = NA_character_,
                    stratum_2_name = NA_character_,
                    stratum_3_name = NA_character_,
                    stratum_4_name = NA_character_,
                    stratum_5_name = NA_character_,
                    is_default = NA_character_,
                    category = NA_character_))
DBI::dbWriteTable(db, 
                  "achilles_results",
                  tibble(
                    analysis_id = NA_integer_,
                    stratum_1 = NA_character_,
                    stratum_2 = NA_character_,
                    stratum_3 = NA_character_,
                    stratum_4 = NA_character_,
                    stratum_5 = NA_character_,
                    count_value = NA_character_))
DBI::dbWriteTable(db, 
                  "achilles_results_dist",
                  tibble(
                    analysis_id = NA_integer_,
                    stratum_1 = NA_character_,
                    stratum_2 = NA_character_,
                    stratum_3 = NA_character_,
                    stratum_4 = NA_character_,
                    stratum_5 = NA_character_,
                    count_value = NA_character_,
                    min_value = NA_character_,
                    max_value = NA_character_,
                    avg_value = NA_character_,
                    stdev_value = NA_character_,
                    median_value = NA_character_,
                    p10_value = NA_character_,
                    p25_value = NA_character_,
                    p75_value = NA_character_,
                    p90_value = NA_character_))

```

We can now include these achilles table in our cdm reference.

```{r, message=FALSE, warning=FALSE, echo = TRUE}
cdm <- cdmFromCon(db, 
                  cdmSchema = "main", 
                  writeSchema = "main",
                  cohortTables = "my_study_cohort",
                  achillesSchema = "main",
                  cdmName = "example_data")
cdm
```

## Adding other tables to the cdm reference

Let's say we have some local data that we want to add to our cdm reference. We can add this both to the same source (in this case a database) and add to our reference using insertTable().

```{r, echo = TRUE}
cars |> 
  glimpse()
```

```{r, echo = TRUE}
cdm <- insertTable(cdm = cdm, 
                   name = "cars", 
                   table = cars, 
                   temporary = FALSE)
```

We can see that now we have this extra table has been uploaded to the database behind our cdm reference and added to our reference.

```{r, echo = TRUE}
cdm
```

```{r, echo = TRUE}
cdm$cars
```

If we already had the table in the database, then we could have instead just assigned it to our existing cdm reference. To see this lets upload the penguins table to our duckdb database.

```{r}
DBI::dbWriteTable(db, 
                  "penguins",
                  palmerpenguins::penguins)
```

Once we have this table in the database, we can see that we can just assign it to our cdm reference.

```{r}
cdm$penguins <- tbl(db, "penguins")

cdm
```

## Mutability of the cdm reference

An important characteristic of our cdm reference is that we can alter the tables in R, but the OMOP CDM data will not be affected.

For example, let's say we want to perform a study with only people born in 1970. For this we could filter our person table to only people born in this year.

```{r, echo = TRUE}
cdm$person <- cdm$person |> 
  filter(year_of_birth == 1970)

cdm$person
```

From now on, when we work with our cdm reference this restriction will continue to have been applied.

```{r, echo = TRUE}
cdm$person |> 
    tally()
```

The original OMOP CDM data itself however will remain unaffected. And we can see if we create our reference again that the underlying data is unchanged.

```{r, message=FALSE, warning=FALSE, echo = TRUE}
cdm <- cdmFromCon(con = db,
                  cdmSchema = "main", 
                  writeSchema = "main", 
                  cdmName = "Synthea Covid-19 data")
cdm$person |> 
    tally()
```

The mutability of our cdm reference is a useful feature for studies as it means we can easily tweak our OMOP CDM data if needed. Meanwhile, leaving the underlying data unchanged is essential so that other study code can run against the data unaffected by any of our changes.

One thing we can't do though is alter the structure of OMOP CDM tables. For example this code would cause an error as the person table must have the column person_id.

```{r, error=TRUE}
cdm$person <- cdm$person |> 
    rename("new_id" = "person_id")
```

In such a case we would have to call the table something else.

```{r, eval=FALSE}
cdm$person_new <- cdm$person |> 
    rename("new_id" = "person_id") |> 
    compute(name = "person_new", 
            temporary = TRUE)
```

Now we would have this new table as an additional table in our cdm reference, knowing it was not in the format of one of the core OMOP CDM tables.

```{r, echo = TRUE}
cdm
```

## Working with temporary and permanent tables

When we create new tables and our cdm reference is in a database we have a choice between using temporary and permanent tables. In most cases we can work with these interchangeably. Below we create one temporary table and one permanent table. We can see that both of these tables have been added to our cdm reference and that we can use them in the same way. 

```{r, message=FALSE, warning=FALSE}
cdm$person_new_temp <- cdm$person |> 
  head(5) |> 
  compute()
```

```{r, message=FALSE, warning=FALSE}
cdm$person_new_permanent <- cdm$person |> 
  head(5) |> 
  compute(name = "person_new_permanent", 
          temporary = FALSE)
```

```{r, message=FALSE, warning=FALSE}
cdm

cdm$person_new_temp

cdm$person_new_permanent
```

One benefit of working with temporary tables is that they will be automatically dropped at the end of the session, whereas the permanent tables will be left over in the database until explicitly dropped. However, one disadvantage of using temporary tables is that we will generally accumulate more and more of them as we go. Whereas with permanent tables we can overwrite them as we go (as in if we're inside a loop that requires a compute we could overwite a intermediate permanent table 100 times rather than creating 100 temporary tables). 

# Disconnecting

Once we have finished our analysis we can close our connection to the database behind our cdm reference like so.

```{r}
cdmDisconnect(cdm) 
```

# Further reading

-   [omopgenerics package](https://darwin-eu.github.io/omopgenerics)
-   [CDMConnector package](https://darwin-eu.github.io/CDMConnector)
