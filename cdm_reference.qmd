# Creating a cdm reference {#sec-cdm_reference}

## The OMOP CDM layout

The OMOP CDM standardises the structure of health care data. Data is stored across a system of tables with established relationships between them. In other words, the OMOP CDM provides a relational database structure. An entity-relationship diagram for version 5.4 of the OMOP CDM is shown below.
![](images/erd.jpg){.lightbox}

These tables are going to be described in more detail in the following chapters. But before that, we can first see how to work with our OMOP CDM data from R.

## Referencing tables from the OMOP common data model

As seen in the previous chapter, once a connection to the database has been created we can then create references to the various tables in the database and build queries using in a familiar dplyr style. To show this, let's download an example dataset (*synthea-covid19-10k*) provided by `CDMConnector`.

```{r, message=FALSE, warning=FALSE}
library(DBI)
library(here)
library(dplyr)
```

```{r, echo = FALSE, message=FALSE}
Sys.setenv(EUNOMIA_DATA_FOLDER = here::here())
CDMConnector::downloadEunomiaData(
  datasetName = "synthea-covid19-10k", cdmVersion = "5.3"
)
```

Now we have this downloaded, we can create a connection to a duckdb database containing the data in a similar way to how we've done before.

```{r, echo = TRUE}
db <- dbConnect(
  duckdb::duckdb(), 
  dbdir = CDMConnector::eunomiaDir(datasetName = "synthea-covid19-10k"))

db |> 
  tbl("person")

db |> 
  tbl("observation_period")
```

We could also perform similar queries to those seen in chapter 1, but this time working with the patient-level, rather than penguin-level, data.

```{r, echo = TRUE}
db |> 
  tbl("person") |> 
  group_by(year_of_birth) |> 
  count() 
```

## Creating a reference to the OMOP common data model

As the structure of the OMOP CDM is already known, we can avoid the overhead of creating individual references to the OMOP CDM tables like above by instead creating a joint reference for all OMOP CDM database tables in one go.

The R object representing OMOP CDM data is defined by the `omopgenerics` package), with the the `CDMConnector` package providing a means of connecting to a OMOP CDM data held in a database. As well as specifying the schema containing our OMOP CDM tables, we also specify a write schema where any database tables we create during our analysis will be stored (often our OMOP CDM tables will be in a schema that we only have read-access to and we'll have another schema where we can have write-access where we intermediate tables are created for a given a study).

```{r, echo = TRUE}
library(omopgenerics)
library(CDMConnector)
cdm <- cdmFromCon(con = db,
                  cdmSchema = "main", 
                  writeSchema = "main", 
                  cdmName = "Synthea Covid-19 data")
cdm
```

::: {.callout-tip collapse="true"}
## Setting a write prefix

We can also specify a write prefix and this will be used whenever permanent tables are created the write schema. This can be useful when we're sharing our write schema with others and want to avoid table name conflicts and easily drop tables created as part of a particular study.

```{r, echo = TRUE, eval = FALSE}
cdm <- cdmFromCon(con = db,
                  cdmSchema = "main", 
                  writeSchema = "main", 
                  writePrefix = "my_study_",
                  cdmName = "Synthea Covid-19 data")
```
:::

We can see that we now have an object that contains references to all the OMOP CDM tables. We can reference specific tables using the "\$" or "\[\[ ... \]\]" operators.

```{r, echo = TRUE}
cdm$person

cdm[["observation_period"]]
```

## Mutability of the cdm reference

An important characteristic of our cdm reference is that we can alter the tables in R, but the OMOP CDM data will not be affected. 

For example, let's say we want to perform a study with only people born in 1970. For this we could filter our person table to only people born in this year.

```{r, echo = TRUE}
cdm$person <- cdm$person |> 
  filter(year_of_birth == 1970)

cdm$person
```

From now on, when we work with our cdm reference this restriction will continue to have been applied.  

```{r, echo = TRUE}
cdm$person |> 
    tally()
```

The original OMOP CDM data itself however will remain unaffected. And we can see if we create our reference again that the underlying data is unchanged.

```{r, echo = TRUE}
cdm <- cdmFromCon(con = db,
                  cdmSchema = "main", 
                  writeSchema = "main", 
                  cdmName = "Synthea Covid-19 data")
cdm$person |> 
    tally()
```

The mutability of our cdm reference is a useful feature for studies as it means we can easily tweak our OMOP CDM data if needed. Meanwhile, leaving the underlying data unchanged is essential so that other study code can run against the data unaffected by any of our changes.

One thing we can't do though is alter the structure of OMOP CDM tables. For example this code would cause an error as the person table must have the column person_id.
```{r, eval=FALSE}
cdm$person <- cdm$person |> 
    rename("new_id" = "person_id")
```

In such a case we would have to call the table something esle.
```{r, eval=FALSE}
cdm$person_new <- cdm$person |> 
    rename("new_id" = "person_id") |> 
    compute()
```

Now we would have this new table as an additional table in our cdm reference, knowing it was not in the format of one of the core OMOP CDM tables.
```{r, echo = TRUE}
cdm
```

## CDM attributes

### CDM name

Our cdm reference will be associated with a name. By default this name will be taken from the cdm source name field from the cdm source table. We can though set this to a different name when creating our cdm reference. This cdm name attribute of our reference is particularly useful in the context of network studies to keep track of which results are associated with which database.

```{r, echo = TRUE}
cdm <- cdmFromCon(db,
  cdmSchema = "main", 
  writeSchema = "main")
cdm$cdm_source
cdmName(cdm)

cdm <- cdmFromCon(db,
  cdmSchema = "main", 
  writeSchema = "main", 
  cdmName = "my_cdm")
cdmName(cdm)
```

### CDM version

We can also easily check the OMOP CDM version that is being used

```{r, echo = TRUE}
cdmVersion(cdm)
```

### CDM Source

Although typically we won't need to use them for writing study code, we can also access lower-level information on the source, such as the database connection.

```{r, echo = TRUE}
attr(cdmSource(cdm), "dbcon")
```

# Disconnecting

Once we have finished our analysis we can close our connection to the database behind our cdm reference like so.

```{r}
cdmDisconnect(cdm) 
```

# Further reading

-   [omopgenerics package](https://darwin-eu.github.io/omopgenerics)
-   [CDMConnector package](https://darwin-eu.github.io/CDMConnector)
