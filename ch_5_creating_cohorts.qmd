---
output: html_document
editor_options: 
  chunk_output_type: console
---

# Adding cohorts to the CDM

## What is a cohort?

When performing research with the OMOP common data model we often want to identify groups of individuals who share some set of characteristics. The criteria for including individuals can range from the seemingly simple (e.g. people diagnosed with asthma) to the much more complicated (e.g. adults diagnosed with asthma who had a year of prior observation time in the database prior to their diagnosis, had no prior history of chronic obstructive pulmonary disease, and no history of use of short-acting beta-antagonists).

The set of people we identify are cohorts, and the OMOP CDM has a specific structure by which they can be represented, with a cohort table having four required fields: 1) cohort definition id (a unique identifier for each cohort), 2) subject id (a foreign key to the subject in the cohort - typically referring to records in the person table), 3) cohort start date, and 4) cohort end date. Individuals can enter a cohort multiple times, but the time in which they are in the cohort cannot overlap.

## Set up

```{r, warning=FALSE, message=FALSE}
library(CDMConnector)
library(CodelistGenerator)
library(CohortConstructor)
library(CohortCharacteristics)
library(dplyr)
        
db <- DBI::dbConnect(duckdb::duckdb(), eunomia_dir())

cdm <- cdm_from_con(
  con = db,
  cdm_schema = "main",
  write_schema = "main"
)
```

## Creating a base cohort

We can create a set of base cohorts using a code lists or concept set

### General concept based cohort

```{r, warning=FALSE, message=FALSE}
cdm$gi_bleed <- conceptCohort(cdm = cdm, 
                     conceptSet = list("gi_bleed" = 192671), 
                     name = "gi_bleed")
cdm$gi_bleed
```

### Demographic cohorts

```{r, warning=FALSE, message=FALSE}
cdm$age_cohorts <- demographicsCohort(cdm = cdm, 
                                      ageRange = list(c(0, 17),
                                                     c(18, 64),
                                                     c(65, Inf)), 
                                      name = "age_cohorts")
cdm$age_cohorts
```

::: {.callout-tip collapse="true"}
### Finding appropriate codes

In the defining the cohorts above we have needed to provide concept IDs to define our cohort. But, where do these come from?

We can search for codes of interest using the `CodelistGenerator` package. This can be done using a text search with the function `CodelistGenerator::getCandidateCodes()`. For example, we can find the GI code we use above like so:

```{r}
getCandidateCodes(cdm = cdm, 
                  keywords = "Gastrointestinal hemorrhage",
                  domains = "condition",
                  includeDescendants = TRUE)
```

We can also do automated searches that make use of the hierarchies in the vocabularies. Here, for example, we find the code for the drug ingredient Acetaminophen and all of it's descendants.

```{r}
CodelistGenerator::getDrugIngredientCodes(cdm = cdm, 
                                          name = "acetaminophen")
```

Note that the data we're using just has a subset of the full OMOP CDM vocabularies. In practice, these searches would return many more codes. And in the case of the former in particular, clinical expertise would then be required to decide which of the codes were in line with the clinical idea at hand.
:::

## Cohort attributes

The set of cohorts we create will be associated with various attributes. The cohort set attribute contains information on the cohorts that we've generated.

```{r, warning=FALSE, message=FALSE}
settings(cdm$gi_bleed) |> 
  glimpse()
```

Another attribute contains counts of the cohorts we've created.

```{r, warning=FALSE, message=FALSE}
cohortCount(cdm$gi_bleed) |> 
  glimpse()
```

And we can also see attrition related to the cohort. We'll see below how any addition inclusion criteria that we apply can be recorded using this attrition attribute.

```{r, warning=FALSE, message=FALSE}
attrition(cdm$gi_bleed) |> 
  glimpse()
```

## Applying inclusion criteria

### Restrict to study period

```{r, warning=FALSE, message=FALSE}
cdm$gi_bleed <- cdm$gi_bleed |>
   requireInDateRange(dateRange = c(as.Date("1990-01-01"), NA))
```

### Only include first cohort entry per person

```{r, warning=FALSE, message=FALSE}
cdm$gi_bleed <- cdm$gi_bleed |> 
     requireIsFirstEntry() 
```

### Applying demographic inclusion criteria

Say for our study we want to include people with a GI bleed who were aged 40 or over at the time. We can use the add variables with these characteristics as seen in chapter 4 and then filter accordingly. The function `CDMConnector::record_cohort_attrition()` will then update our cohort attributes as we can see below.

```{r, warning=FALSE, message=FALSE}
cdm$gi_bleed <- cdm$gi_bleed |>
   requireDemographics(ageRange = c(18, 64), sex = "Male")
```

```{r, warning=FALSE, message=FALSE}
cohortCount(cdm$gi_bleed)
settings(cdm$gi_bleed)
```

### Applying cohort-based inclusion criteria

As well as requirements about specific demographics, we may also want to use another cohort for inclusion criteria. Let's say we want to exclude anyone with rheumatoid arthritis diagnosed before their GI bleed. We can first generate this cohort and then apply this additional exclusion criteria like so.

```{r, warning=FALSE, message=FALSE}
cdm$acetaminophen <- conceptCohort(
  cdm = cdm,
  list("acetaminophen" = c(
    1125315,
    1127078,
    1127433,
    40229134,
    40231925,
    40162522,
    19133768
  )), 
name = "acetaminophen"
)
cdm$acetaminophen
```

```{r, warning=FALSE, message=FALSE}
cdm$gi_bleed <- cdm$gi_bleed |> 
  requireCohortIntersect(targetCohortTable = "acetaminophen", 
                         indexDate = "cohort_start_date", 
                         window = c(-Inf, -1)) 
```

```{r, warning=FALSE, message=FALSE}
cohortCount(cdm$gi_bleed)
attrition(cdm$gi_bleed)
```

# Visualising cohort attrition

```{r, warning=FALSE, message=FALSE}
gi_bleed_attrition <- summariseCohortAttrition(cdm$gi_bleed)
plotCohortAttrition(gi_bleed_attrition)
```


# Further reading

-   ...