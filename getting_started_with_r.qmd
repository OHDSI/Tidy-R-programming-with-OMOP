# Getting started

## A first data analysis in R with a database

![](images/lter_penguins.png){width="250"}

*Artwork by \@allison_horst*

Before we start thinking about working with health care data spread across the OMOP common data model, let's first do a quick data analysis using a simpler dataset. For this we'll use data data from [palmerpenguins package](https://allisonhorst.github.io/palmerpenguins/), which contains data on penguins collected from the [Palmer Station](https://en.wikipedia.org/wiki/Palmer_Station) in Antarctica.

## Getting set up

Assuming that you have R and RStudio already set up, first we need to install a few packages not included in base R if we don´t already have them.

```{r, eval=FALSE}
install.packages("dplyr")
install.packages("ggplot2")
install.packages("DBI")
install.packages("duckdb")
install.packages("palmerpenguins")
```

Once installed, we can load them like so.

```{r, message=FALSE}
library(dplyr)
library(ggplot2)
library(DBI)
library(duckdb)
library(palmerpenguins)
```

## Taking a peek at the data

We can get an overview of the data using the `glimpse()` command.

```{r}
glimpse(penguins)
```

Or we could take a look at the first rows of the data using `head()`

```{r}
head(penguins, 5)
```

## Inserting data into a database

Let's put our penguins data into a duckdb database. We create the duckdb database, add the penguins data, and then create a reference to the table containing the data.

```{r}
db<-dbConnect(duckdb::duckdb(), dbdir=":memory:")
dbWriteTable(db, "penguins", penguins)
penguins_db<-tbl(db, "penguins")
```

Now the data is in a database we could use SQL to get the first rows that we saw before

```{r}
dbGetQuery(db, "SELECT * FROM penguins LIMIT 5")
```

But we could also use the same R code as before

```{r}
head(penguins_db, 5)
```

## Translation from R to SQL

The magic here is provided by dbplyr which takes the R code and converts it into SQL, which is this case looks like

```{r}
head(penguins_db, 1) %>% 
  show_query()
```

More complicated SQL can also be written in what might be familiar dplyr code, for example

```{r, warning=FALSE}
penguins_db %>% 
  group_by(species) %>% 
  summarise(min_bill_length_mm=min(bill_length_mm),
            median_bill_length_mm=median(bill_length_mm),
            max_bill_length_mm=max(bill_length_mm)) %>% 
  mutate(min_max_bill_length_mm=paste0(min_bill_length_mm, 
                                       " to ",
                                       max_bill_length_mm)) %>% 
  select("species", 
         "median_bill_length_mm",
         "min_max_bill_length_mm")
```

with the corresponding SQL looking like

```{r, warning=FALSE}
penguins_db %>% 
  group_by(species) %>% 
  summarise(min_bill_length_mm=min(bill_length_mm),
            median_bill_length_mm=median(bill_length_mm),
            max_bill_length_mm=max(bill_length_mm)) %>% 
  mutate(min_max_bill_length_mm=paste0(min, " to ", max)) %>% 
  select("species", 
         "median_bill_length_mm",
         "min_max_bill_length_mm") %>% 
  show_query()
```


## Example analysis

Let´s start by getting a count by species

```{r}
penguins_db %>% 
  group_by(species) %>% 
  count()
```

Now suppose we are particularly interested in the body mass variable. We can first notice that there are a couple of missing records for this.

```{r}
penguins_db %>% 
  mutate(missing_body_mass_g=if_else(
    is.na(body_mass_g),1,0
  )) %>% 
  group_by(species, missing_body_mass_g) %>% 
  tally()
```

We can get the mean for each of the species (dropping those two missing records).

```{r, warning=FALSE, message=FALSE}
penguins_db %>% 
  group_by(species) %>% 
  summarise(mean_body_mass_g=round(mean(body_mass_g, na.rm=TRUE),0))
```

We can then also do a histogram for each of the species. For this we need to bring the data into R so that we can work with `ggplot()`, and we use `collect()` to do this.

```{r, warning=FALSE, message=FALSE}
penguins_db %>% 
  collect() %>% 
  ggplot(aes(group=species, fill=species))+
  facet_grid(species~ .) +
  geom_histogram(aes(body_mass_g), colour="black", binwidth = 100)+
  theme_bw()+
  theme(legend.position = "none") 
```

How about the relationship between body mass and bill depth?

```{r, warning=FALSE, message=FALSE}
penguins %>% 
  collect() %>% 
  ggplot(aes(x=bill_depth_mm,y=body_mass_g))+
  geom_point()+
  geom_smooth(method="lm",se=FALSE )+
  theme_bw()+
  theme(legend.position = "none") 
```

But what about by species?

```{r, warning=FALSE, message=FALSE}
penguins %>% 
  collect() %>% 
  ggplot(aes(x=bill_depth_mm,y=body_mass_g))+
  facet_grid(species~ .) +
  geom_point()+
  geom_smooth(method="lm",se=FALSE )+
  theme_bw()+
  theme(legend.position = "none") 
```

As well as having an example of working with data in database from R, you also have an example of [Simpson´s paradox](https://en.wikipedia.org/wiki/Simpson%27s_paradox)! And now we've reached the end of this example, we can close the database like so

```{r}
dbDisconnect(db)
```
