[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Tidy R programming with data in databases and Apache Arrow: applications with the OMOP common data model",
    "section": "",
    "text": "This book is written for analysts writing analytic code with R to run against the OMOP CDM. This source code for the book can be found at this Github repository Please open an issue there if you have a question or suggestion. Pull requests with suggested changes and additions are also most welcome."
  },
  {
    "objectID": "getting_started_with_r.html",
    "href": "getting_started_with_r.html",
    "title": "1  Getting started",
    "section": "",
    "text": "Artwork by @allison_horst\nBefore we start thinking about working with health care data spread across the OMOP common data model, let’s first do a quick data analysis using a simpler dataset. For this we’ll use data data from palmerpenguins package, which contains data on penguins collected from the Palmer Station in Antarctica."
  },
  {
    "objectID": "getting_started_with_r.html#getting-set-up",
    "href": "getting_started_with_r.html#getting-set-up",
    "title": "1  Getting started",
    "section": "1.2 Getting set up",
    "text": "1.2 Getting set up\nAssuming that you have R and RStudio already set up, first we need to install a few packages not included in base R if we don´t already have them.\n\ninstall.packages(\"dplyr\")\ninstall.packages(\"ggplot2\")\ninstall.packages(\"DBI\")\ninstall.packages(\"duckdb\")\ninstall.packages(\"palmerpenguins\")\n\nOnce installed, we can load them like so.\n\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(DBI)\nlibrary(duckdb)\nlibrary(palmerpenguins)"
  },
  {
    "objectID": "getting_started_with_r.html#taking-a-peek-at-the-data",
    "href": "getting_started_with_r.html#taking-a-peek-at-the-data",
    "title": "1  Getting started",
    "section": "1.3 Taking a peek at the data",
    "text": "1.3 Taking a peek at the data\nWe can get an overview of the data using the glimpse() command.\n\nglimpse(penguins)\n\nRows: 344\nColumns: 8\n$ species           <fct> Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…\n$ island            <fct> Torgersen, Torgersen, Torgersen, Torgersen, Torgerse…\n$ bill_length_mm    <dbl> 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, …\n$ bill_depth_mm     <dbl> 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, …\n$ flipper_length_mm <int> 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186…\n$ body_mass_g       <int> 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, …\n$ sex               <fct> male, female, female, NA, female, male, female, male…\n$ year              <int> 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…\n\n\nOr we could take a look at the first rows of the data using head()\n\nhead(penguins, 5)\n\n# A tibble: 5 × 8\n  species island    bill_length_mm bill_depth_mm flipper_l…¹ body_…² sex    year\n  <fct>   <fct>              <dbl>         <dbl>       <int>   <int> <fct> <int>\n1 Adelie  Torgersen           39.1          18.7         181    3750 male   2007\n2 Adelie  Torgersen           39.5          17.4         186    3800 fema…  2007\n3 Adelie  Torgersen           40.3          18           195    3250 fema…  2007\n4 Adelie  Torgersen           NA            NA            NA      NA <NA>   2007\n5 Adelie  Torgersen           36.7          19.3         193    3450 fema…  2007\n# … with abbreviated variable names ¹​flipper_length_mm, ²​body_mass_g"
  },
  {
    "objectID": "getting_started_with_r.html#inserting-data-into-a-database",
    "href": "getting_started_with_r.html#inserting-data-into-a-database",
    "title": "1  Getting started",
    "section": "1.4 Inserting data into a database",
    "text": "1.4 Inserting data into a database\nLet’s put our penguins data into a duckdb database. We create the duckdb database, add the penguins data, and then create a reference to the table containing the data.\n\ndb<-dbConnect(duckdb::duckdb(), dbdir=\":memory:\")\ndbWriteTable(db, \"penguins\", penguins)\npenguins_db<-tbl(db, \"penguins\")\n\nNow the data is in a database we could use SQL to get the first rows that we saw before\n\ndbGetQuery(db, \"SELECT * FROM penguins LIMIT 5\")\n\n  species    island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n1  Adelie Torgersen           39.1          18.7               181        3750\n2  Adelie Torgersen           39.5          17.4               186        3800\n3  Adelie Torgersen           40.3          18.0               195        3250\n4  Adelie Torgersen             NA            NA                NA          NA\n5  Adelie Torgersen           36.7          19.3               193        3450\n     sex year\n1   male 2007\n2 female 2007\n3 female 2007\n4   <NA> 2007\n5 female 2007\n\n\nBut we could also use the same R code as before\n\nhead(penguins_db, 5)\n\n# Source:   SQL [5 x 8]\n# Database: DuckDB 0.5.0 [eburn@Windows 10 x64:R 4.2.1/:memory:]\n  species island    bill_length_mm bill_depth_mm flipper_l…¹ body_…² sex    year\n  <fct>   <fct>              <dbl>         <dbl>       <int>   <int> <fct> <int>\n1 Adelie  Torgersen           39.1          18.7         181    3750 male   2007\n2 Adelie  Torgersen           39.5          17.4         186    3800 fema…  2007\n3 Adelie  Torgersen           40.3          18           195    3250 fema…  2007\n4 Adelie  Torgersen           NA            NA            NA      NA <NA>   2007\n5 Adelie  Torgersen           36.7          19.3         193    3450 fema…  2007\n# … with abbreviated variable names ¹​flipper_length_mm, ²​body_mass_g"
  },
  {
    "objectID": "getting_started_with_r.html#analysis",
    "href": "getting_started_with_r.html#analysis",
    "title": "1  Getting started",
    "section": "1.6 Analysis",
    "text": "1.6 Analysis\nLet´s get a count by species\n\npenguins_db %>% \n  group_by(species) %>% \n  count()\n\n# Source:   SQL [3 x 2]\n# Database: DuckDB 0.5.0 [eburn@Windows 10 x64:R 4.2.1/:memory:]\n  species       n\n  <fct>     <dbl>\n1 Adelie      152\n2 Gentoo      124\n3 Chinstrap    68\n\n\nNow suppose we are particularly interested in the body mass variable. We can first notice that there are a couple of missing records for this.\n\npenguins_db %>% \n  mutate(missing_body_mass_g=if_else(\n    is.na(body_mass_g),1,0\n  )) %>% \n  group_by(species, missing_body_mass_g) %>% \n  tally()\n\n# Source:   SQL [5 x 3]\n# Database: DuckDB 0.5.0 [eburn@Windows 10 x64:R 4.2.1/:memory:]\n# Groups:   species\n  species   missing_body_mass_g     n\n  <fct>                   <dbl> <dbl>\n1 Adelie                      0   151\n2 Adelie                      1     1\n3 Gentoo                      0   123\n4 Gentoo                      1     1\n5 Chinstrap                   0    68\n\n\nWe can get the mean for each of the species (dropping those two missing records).\n\npenguins_db %>% \n  group_by(species) %>% \n  summarise(mean_body_mass_g=round(mean(body_mass_g, na.rm=TRUE),0))\n\n# Source:   SQL [3 x 2]\n# Database: DuckDB 0.5.0 [eburn@Windows 10 x64:R 4.2.1/:memory:]\n  species   mean_body_mass_g\n  <fct>                <dbl>\n1 Adelie                3701\n2 Gentoo                5076\n3 Chinstrap             3733\n\n\nWe can then also do a histogram for each of the species. For this we need to bring the data into R so that we can work with ggplot(), and we use collect() to do this.\n\npenguins_db %>% \n  collect() %>% \n  ggplot(aes(group=species, fill=species))+\n  facet_grid(species~ .) +\n  geom_histogram(aes(body_mass_g), colour=\"black\", binwidth = 100)+\n  theme_bw()+\n  theme(legend.position = \"none\") \n\n\n\n\nHow about the relationship between body mass and bill depth?\n\npenguins %>% \n  collect() %>% \n  ggplot(aes(x=bill_depth_mm,y=body_mass_g))+\n  geom_point()+\n  geom_smooth(method=\"lm\",se=FALSE )+\n  theme_bw()+\n  theme(legend.position = \"none\") \n\n\n\n\nBut what about by species?\n\npenguins %>% \n  collect() %>% \n  ggplot(aes(x=bill_depth_mm,y=body_mass_g))+\n  facet_grid(species~ .) +\n  geom_point()+\n  geom_smooth(method=\"lm\",se=FALSE )+\n  theme_bw()+\n  theme(legend.position = \"none\") \n\n\n\n\nAs well as having an example of working with data in database from R, you also have an example of Simpson´s paradox! And now we’ve reached the end of this example, we can close the database like so\n\ndbDisconnect(db)"
  },
  {
    "objectID": "databases_and_r.html#section",
    "href": "databases_and_r.html#section",
    "title": "4  filter(), select(), mutate()",
    "section": "4.1 ",
    "text": "4.1"
  },
  {
    "objectID": "projects.html",
    "href": "projects.html",
    "title": "8  Structure of an analysis",
    "section": "",
    "text": "Artwork by @allison_horst"
  },
  {
    "objectID": "projects.html#a-note-on-file-paths",
    "href": "projects.html#a-note-on-file-paths",
    "title": "8  Structure of an analysis",
    "section": "8.2 A note on file paths",
    "text": "8.2 A note on file paths"
  },
  {
    "objectID": "projects.html#section",
    "href": "projects.html#section",
    "title": "8  Structure of an analysis",
    "section": "8.3 ",
    "text": "8.3"
  },
  {
    "objectID": "projects.html#adding-renv",
    "href": "projects.html#adding-renv",
    "title": "8  Structure of an analysis",
    "section": "8.4 Adding renv",
    "text": "8.4 Adding renv"
  },
  {
    "objectID": "projects.html#structure-of-an-r-project",
    "href": "projects.html#structure-of-an-r-project",
    "title": "8  Structure of an analysis",
    "section": "8.5 Structure of an R project",
    "text": "8.5 Structure of an R project"
  },
  {
    "objectID": "exploring_the_cdm.html",
    "href": "exploring_the_cdm.html",
    "title": "3  Exploring the CDM",
    "section": "",
    "text": "3.0.2 distinct()\n\n\n3.0.3 rename()\n\n\n3.0.4 group_by()\n\n\n3.0.5 summarise()"
  },
  {
    "objectID": "moving_to_arrow_and_r.html",
    "href": "moving_to_arrow_and_r.html",
    "title": "8  Getting to tidy data",
    "section": "",
    "text": "8.0.2 collect()\n\n\n8.0.3 pull()"
  },
  {
    "objectID": "getting_started_with_r.html#organising-data-analyses",
    "href": "getting_started_with_r.html#organising-data-analyses",
    "title": "1  Getting started with R and database",
    "section": "1.6 Organising data analyses",
    "text": "1.6 Organising data analyses\n\nArtwork by @allison_horst"
  },
  {
    "objectID": "getting_started_with_r.html#a-note-on-file-paths",
    "href": "getting_started_with_r.html#a-note-on-file-paths",
    "title": "1  Getting started with R and database",
    "section": "1.7 A note on file paths",
    "text": "1.7 A note on file paths"
  },
  {
    "objectID": "getting_started_with_r.html#adding-renv",
    "href": "getting_started_with_r.html#adding-renv",
    "title": "1  Getting started with R and database",
    "section": "1.8 Adding renv",
    "text": "1.8 Adding renv"
  },
  {
    "objectID": "getting_started_with_r.html#structure-of-an-r-project",
    "href": "getting_started_with_r.html#structure-of-an-r-project",
    "title": "1  Getting started with R and database",
    "section": "1.9 Structure of an R project",
    "text": "1.9 Structure of an R project"
  },
  {
    "objectID": "strings.html",
    "href": "strings.html",
    "title": "Tidy R programming with data in databases and Apache Arrow: applications with the OMOP common data model",
    "section": "",
    "text": "strings"
  },
  {
    "objectID": "databases_and_r.html",
    "href": "databases_and_r.html",
    "title": "4  filter(), select(), mutate()",
    "section": "",
    "text": "4.0.2 paste0 / glue\n\n\n4.0.3 working with strings"
  },
  {
    "objectID": "dates.html",
    "href": "dates.html",
    "title": "Tidy R programming with data in databases and Apache Arrow: applications with the OMOP common data model",
    "section": "",
    "text": "Dates"
  },
  {
    "objectID": "getting_started_with_r.html#reproducibility-in-renv",
    "href": "getting_started_with_r.html#reproducibility-in-renv",
    "title": "1  Getting started with R and database",
    "section": "1.7 Reproducibility in renv",
    "text": "1.7 Reproducibility in renv"
  },
  {
    "objectID": "getting_started_with_r.html#section",
    "href": "getting_started_with_r.html#section",
    "title": "1  Getting started with R and database",
    "section": "1.8 ",
    "text": "1.8"
  },
  {
    "objectID": "getting_started_with_r.html#translation-from-r-to-sql",
    "href": "getting_started_with_r.html#translation-from-r-to-sql",
    "title": "1  Getting started",
    "section": "1.5 Translation from R to SQL",
    "text": "1.5 Translation from R to SQL\nThe magic here is provided by dbplyr which takes the R code and converts it into SQL, which is this case looks like\n\nhead(penguins_db, 1) %>% \n  show_query()\n\n<SQL>\nSELECT *\nFROM penguins\nLIMIT 1\n\n\nMore complicated SQL can also be written in what might be familiar dplyr code, for example\n\npenguins_db %>% \n  group_by(species) %>% \n  summarise(min_bill_length_mm=min(bill_length_mm),\n            median_bill_length_mm=median(bill_length_mm),\n            max_bill_length_mm=max(bill_length_mm)) %>% \n  mutate(min_max_bill_length_mm=paste0(min_bill_length_mm, \n                                       \" to \",\n                                       max_bill_length_mm)) %>% \n  select(\"species\", \n         \"median_bill_length_mm\",\n         \"min_max_bill_length_mm\")\n\n# Source:   SQL [3 x 3]\n# Database: DuckDB 0.5.0 [eburn@Windows 10 x64:R 4.2.1/:memory:]\n  species   median_bill_length_mm min_max_bill_length_mm\n  <fct>                     <dbl> <chr>                 \n1 Adelie                     38.8 32.1 to 46.0          \n2 Gentoo                     47.3 40.9 to 59.6          \n3 Chinstrap                  49.6 40.9 to 58.0          \n\n\nwith the corresponding SQL looking like\n\npenguins_db %>% \n  group_by(species) %>% \n  summarise(min_bill_length_mm=min(bill_length_mm),\n            median_bill_length_mm=median(bill_length_mm),\n            max_bill_length_mm=max(bill_length_mm)) %>% \n  mutate(min_max_bill_length_mm=paste0(min, \" to \", max)) %>% \n  select(\"species\", \n         \"median_bill_length_mm\",\n         \"min_max_bill_length_mm\") %>% \n  show_query()\n\n<SQL>\nSELECT\n  species,\n  median_bill_length_mm,\n  CONCAT_WS('', .Primitive(\"min\"), ' to ', .Primitive(\"max\")) AS min_max_bill_length_mm\nFROM (\n  SELECT\n    species,\n    MIN(bill_length_mm) AS min_bill_length_mm,\n    PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY bill_length_mm) AS median_bill_length_mm,\n    MAX(bill_length_mm) AS max_bill_length_mm\n  FROM penguins\n  GROUP BY species\n) q01"
  },
  {
    "objectID": "other.html",
    "href": "other.html",
    "title": "10  Organising data analyses with projects and renv",
    "section": "",
    "text": "Artwork by @allison_horst"
  },
  {
    "objectID": "getting_started_with_r.html#example-analysis",
    "href": "getting_started_with_r.html#example-analysis",
    "title": "1  Getting started",
    "section": "1.6 Example analysis",
    "text": "1.6 Example analysis\nLet´s start by getting a count by species\n\npenguins_db %>% \n  group_by(species) %>% \n  count()\n\n# Source:   SQL [3 x 2]\n# Database: DuckDB 0.5.0 [eburn@Windows 10 x64:R 4.2.1/:memory:]\n  species       n\n  <fct>     <dbl>\n1 Adelie      152\n2 Gentoo      124\n3 Chinstrap    68\n\n\nNow suppose we are particularly interested in the body mass variable. We can first notice that there are a couple of missing records for this.\n\npenguins_db %>% \n  mutate(missing_body_mass_g=if_else(\n    is.na(body_mass_g),1,0\n  )) %>% \n  group_by(species, missing_body_mass_g) %>% \n  tally()\n\n# Source:   SQL [5 x 3]\n# Database: DuckDB 0.5.0 [eburn@Windows 10 x64:R 4.2.1/:memory:]\n# Groups:   species\n  species   missing_body_mass_g     n\n  <fct>                   <dbl> <dbl>\n1 Adelie                      0   151\n2 Adelie                      1     1\n3 Gentoo                      0   123\n4 Gentoo                      1     1\n5 Chinstrap                   0    68\n\n\nWe can get the mean for each of the species (dropping those two missing records).\n\npenguins_db %>% \n  group_by(species) %>% \n  summarise(mean_body_mass_g=round(mean(body_mass_g, na.rm=TRUE),0))\n\n# Source:   SQL [3 x 2]\n# Database: DuckDB 0.5.0 [eburn@Windows 10 x64:R 4.2.1/:memory:]\n  species   mean_body_mass_g\n  <fct>                <dbl>\n1 Adelie                3701\n2 Gentoo                5076\n3 Chinstrap             3733\n\n\nWe can then also do a histogram for each of the species. For this we need to bring the data into R so that we can work with ggplot(), and we use collect() to do this.\n\npenguins_db %>% \n  collect() %>% \n  ggplot(aes(group=species, fill=species))+\n  facet_grid(species~ .) +\n  geom_histogram(aes(body_mass_g), colour=\"black\", binwidth = 100)+\n  theme_bw()+\n  theme(legend.position = \"none\") \n\n\n\n\nHow about the relationship between body mass and bill depth?\n\npenguins %>% \n  collect() %>% \n  ggplot(aes(x=bill_depth_mm,y=body_mass_g))+\n  geom_point()+\n  geom_smooth(method=\"lm\",se=FALSE )+\n  theme_bw()+\n  theme(legend.position = \"none\") \n\n\n\n\nBut what about by species?\n\npenguins %>% \n  collect() %>% \n  ggplot(aes(x=bill_depth_mm,y=body_mass_g))+\n  facet_grid(species~ .) +\n  geom_point()+\n  geom_smooth(method=\"lm\",se=FALSE )+\n  theme_bw()+\n  theme(legend.position = \"none\") \n\n\n\n\nAs well as having an example of working with data in database from R, you also have an example of Simpson´s paradox! And now we’ve reached the end of this example, we can close the database like so\n\ndbDisconnect(db)"
  }
]