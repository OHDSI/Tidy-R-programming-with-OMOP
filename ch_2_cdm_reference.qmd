# Creating a reference to the OMOP common data model

## Connecting to a database from R using DBI

Database connections from R can be made using the [DBI package](https://dbi.r-dbi.org/). The back-end for `DBI` is facilitated by database specific driver packages. As an example, lets say we want to work with an in-process [duckdb](https://duckdb.org/) database from R. In this case the we can use the duckdb R package as the driver, connecting to a database with the OMOP CDM for a synthetic population of 200,000 people.

```{r, message=FALSE, warning=FALSE}
library(DBI)
library(here)
```

```{r, eval = FALSE}
db<-dbConnect(duckdb::duckdb(), 
              dbdir= Sys.getenv("DUCKDB"))
```

If we instead wanted to connect to other database management systems, these connections would be supported by the associated back-end packages. For example a connection to a Postgres database would look something like:

```{r, eval=FALSE}
# Postgres
db <- DBI::dbConnect(RPostgres::Postgres(),
                      dbname = Sys.getenv("CDM5_POSTGRESQL_DBNAME"),
                      host = Sys.getenv("CDM5_POSTGRESQL_HOST"),
                      user = Sys.getenv("CDM5_POSTGRESQL_USER"),
                      password = Sys.getenv("CDM5_POSTGRESQL_PASSWORD"))
```

## Creating a reference to the OMOP common data model

As seen in the previous chapter, once a connection to the database has been created we could then create references to the various tables in the database and build queries using in a familiar dplyr style. However, as the structure of the OMOP CDM is already known, we can avoid the overhead of creating individual references to the OMOP CDM tables by using the `CDMConnector` package. `CDMConnector` will do the work for us and quickly create a joint reference for all OMOP CDM database tables.

If you don't already have it installed, the first step would be to install `CDMConnector` from CRAN.

```{r, eval=FALSE}
install.packages("CDMConnector")
```

For this example, we'll use an example dataset (*synthea-covid19-10k*) provided by `CDMConnector`. First let's load packages and then download the example data.

```{r, echo = TRUE, warning=FALSE, message=FALSE}
library(DBI)
library(CDMConnector)
library(here)
```

```{r, echo = TRUE, warning=FALSE, message=FALSE}
downloadEunomiaData(
  datasetName = "synthea-covid19-10k",
  cdmVersion = "5.3",
  pathToData = here(),
  overwrite = FALSE
)
```

After connecting to the database containing the OMOP CDM, we use `CDMConnector` to create our cdm reference. 

```{r, echo = TRUE}
db <- dbConnect(duckdb::duckdb(), 
              dbdir = eunomiaDir(datasetName = "synthea-covid19-10k"))
cdm <- cdm_from_con(con = db, 
                    cdm_schema = "main", 
                    write_schema = "main", 
                    cdm_name = "Synthea Covid-19 data")
cdm
```

Once we have created the our reference to the overall OMOP CDM, we can reference specific tables using the "\$" operator.

```{r, echo = TRUE}
cdm$observation_period
```

Alternatively, you could also access a specific table reference like so

```{r, echo = TRUE}
cdm[["observation_period"]]
```

When creating our cdm reference we can also specify a write schema. This would be a schema in which we have permission to create tables (as we're unlikely to have that permission for the schema containing the tables with the patient-level data).

```{r, echo = TRUE, eval = FALSE}
cdm <- cdm_from_con(db,
  cdm_schema = "main",
  write_schema = "results")
```

::: {.callout-tip collapse="true"}
## Setting a write prefix

We can set a prefix that to use when permanent tables are created the write schema. This can be useful when we're sharing our write schema with others and want to avoid table name conflicts.

```{r, echo = TRUE, eval = FALSE}
cdm <- cdm_from_con(db,
  cdm_schema = "main",
  write_schema = c(schema="main", prefix = "example_"))
```
:::

## CDM name

Our cdm reference will be associated with a name. By default this name will be taken from the cdm source name field from the cdm source table. We can though set this to a different name when creating our cdm reference. This cdm name attribute of our reference is particularly useful in the context of network studies to keep track of which results are associated with which database.

```{r, echo = TRUE}
cdm <- cdm_from_con(db,
  cdm_schema = "main", 
  write_schema = "main")
cdm$cdm_source
cdm_name(cdm)

cdm <- cdm_from_con(db,
  cdm_schema = "main", 
  write_schema = "main", 
  cdm_name = "my_cdm")
cdm_name(cdm)
```

# Database snapshot

After creating our cdm reference we can get a summary of the metadata for the OMOP CDM data using the `snapshot()` function from `CDMConnector`.

```{r, echo=FALSE, message=FALSE, warning=FALSE}
library(dplyr)
```

```{r}
cdm_snapshot <- cdm_from_con(con = db, 
                             cdm_name = "my_cdm",
                             cdm_schema = "main", 
                             write_schema = "main") %>% 
  snapshot()
cdm_snapshot %>% 
  glimpse()
```

# Disconnecting

Once we have finished our analysis we can close our connection to the database behind our cdm reference like so.

```{r}
cdmDisconnect(cdm) 
```

This is equivalent to closing the connection directly like we saw in the previous chapter.

```{r, eval=FALSE}
dbDisconnect(attr(cdm, "dbcon"))
```

# Further reading

-   [CDMConnector package](https://darwin-eu.github.io/CDMConnector)
