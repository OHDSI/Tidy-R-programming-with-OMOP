# Creating a reference to data in the OMOP CDM

## Connecting to a database from R using DBI

Database connections from R can be made using the [DBI package](https://dbi.r-dbi.org/). The back-end for `DBI` is facilitated by database specific driver packages. We saw in Chapter 1 an example where we created a new, empty, in-process [duckdb](https://duckdb.org/) database which we then added database. But we could have instead connected to an existing duckdb database. This could, for example, look like

```{r, message=FALSE, warning=FALSE}
library(DBI)
library(here)
library(dplyr)
```

```{r, eval = FALSE}
db <- dbConnect(duckdb::duckdb(), 
              dbdir = here("my_duckdb_database.ducdkb"))
```

For other database management systems, creating connections would be supported by the associated back-end packages. For example a connection to a Postgres database would look something like:

```{r, eval=FALSE}
db <- DBI::dbConnect(RPostgres::Postgres(),
                      dbname = Sys.getenv("CDM5_POSTGRESQL_DBNAME"),
                      host = Sys.getenv("CDM5_POSTGRESQL_HOST"),
                      user = Sys.getenv("CDM5_POSTGRESQL_USER"),
                      password = Sys.getenv("CDM5_POSTGRESQL_PASSWORD"))
```

## Referencing tables from the OMOP common data model

As seen in the previous chapter, once a connection to the database has been created we can then create references to the various tables in the database and build queries using in a familiar dplyr style. To show this, let's download an example dataset (*synthea-covid19-10k*) provided by `CDMConnector`. 

```{r, echo = FALSE, message=FALSE}
Sys.setenv(EUNOMIA_DATA_FOLDER = here::here())
CDMConnector::downloadEunomiaData()
```


```{r, echo = TRUE, warning=FALSE, message=FALSE}
CDMConnector::downloadEunomiaData(
  datasetName = "synthea-covid19-10k", cdmVersion = "5.3"
)
```

Now we have this downloaded, we can create a connection to a duckdb database containing the data in a similar way to how we've done before.

```{r, echo = TRUE}
db <- dbConnect(duckdb::duckdb(), 
              dbdir = CDMConnector::eunomiaDir(datasetName = "synthea-covid19-10k"))

db |> tbl("person")

db |> tbl("observation_period")
```

We could also perform similar queries to those seen in chapter 1, but this time working with the patient-level, rather than penguin-level, data. 
```{r, echo = TRUE}
db |> 
  tbl("person") |> 
  group_by(year_of_birth) |> 
  count() 
```

## Creating a reference to the OMOP common data model

As the structure of the OMOP CDM is already known, we can avoid the overhead of creating individual references to the OMOP CDM tables like above by instead using the `CDMConnector` package. `CDMConnector` will do the work for us and quickly create a joint reference for all OMOP CDM database tables in one go. As well as specifying the schema where our OMOP CDM tables, we also specify a write schema where any database tables we create during our analysis will be stored (often our OMOP CDM tables will be in a schema that we only have read-access to and we'll have another schema where we can have write-access). 

```{r, echo = TRUE}
library(CDMConnector)
cdm <- cdm_from_con(con = db, 
                    cdm_schema = "main", 
                    write_schema = "main", 
                    cdm_name = "Synthea Covid-19 data")
cdm
```

::: {.callout-tip collapse="true"}
## Setting a write prefix
We can also specify a write prefix and this will be used whenever permanent tables are created the write schema. This can be useful when we're sharing our write schema with others and want to avoid table name conflicts and easily drop tables created as part of a particular study.

```{r, echo = TRUE, eval = FALSE}
cdm <- cdm_from_con(db,
  cdm_schema = "main",
  write_schema = c(schema="main", prefix = "my_study_"))
```
:::

We can see that we now have an object that contains references to all the OMOP CDM tables. We can reference specific tables using the "\$" or "[[ ... ]]" operators.

```{r, echo = TRUE}
cdm$person

cdm[["observation_period"]]
```

## CDM attributes

### CDM name

Our cdm reference will be associated with a name. By default this name will be taken from the cdm source name field from the cdm source table. We can though set this to a different name when creating our cdm reference. This cdm name attribute of our reference is particularly useful in the context of network studies to keep track of which results are associated with which database.

```{r, echo = TRUE}
cdm <- cdm_from_con(db,
  cdm_schema = "main", 
  write_schema = "main")
cdm$cdm_source
cdm_name(cdm)

cdm <- cdm_from_con(db,
  cdm_schema = "main", 
  write_schema = "main", 
  cdm_name = "my_cdm")
cdm_name(cdm)
```

### CDM version
We can also easily check the OMOP CDM version that is being used
```{r, echo = TRUE}
omopgenerics::cdmVersion(cdm)
```

### CDM Source
From the cdm reference we can also extract information about the data source. We can see that we're using a duckdb database.
```{r, echo = TRUE}
omopgenerics::cdmSource(cdm)
```
Although typically we won't need to use them for writing study code, we can also access lower-level information on the source such as the database connection.
```{r, echo = TRUE}
source_details <- omopgenerics::cdmSourceType(cdm)
attr(omopgenerics::cdmSource(cdm), "dbcon")
```

# Disconnecting

Once we have finished our analysis we can close our connection to the database behind our cdm reference like so.

```{r}
cdmDisconnect(cdm) 
```

# Further reading

-   [CDMConnector package](https://darwin-eu.github.io/CDMConnector)
